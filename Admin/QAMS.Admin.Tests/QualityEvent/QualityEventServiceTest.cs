//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QAMS.Tests
{
    using System;
    using System.Data;
    using System.Data.SqlClient;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using QAMS.Common.Entities;
    using QAMS.Admin.Entities;
    using QAMS.Admin.Data;
    using QAMS.Admin.Services;
    using Moq;
    using NUnit.Framework;
    
    
    /// <summary>
    /// Comment
    /// </summary>
    public class QualityEventTest
    {
        
        private Mock<IQualityEventData> qualityEventData;
        
        private IQualityEventService qualityEventService;
        
        [SetUp()]
        public void Setup()
        {
              qualityEventData = new Mock<IQualityEventData>();
              qualityEventService = new QualityEventService(qualityEventData.Object);
        }
        
        [Test()]
        public void GetAllQualityEvent()
        {
            List<QualityEvent> qualityEvent = new List<QualityEvent>();
            RequestContext requestContext = new RequestContext();
            requestContext.PageNumber=1;
            requestContext.PageSize=10;
            qualityEventData.Setup(p=>p.GetAllQualityEvent(requestContext)).Returns(MockQualityEventData());
            var result = qualityEventService.GetAllQualityEvent(requestContext);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void GetQualityEventById()
        {
            int id = 0;
            qualityEventData.Setup(p=>p.GetQualityEventById(id)).Returns(MockQualityEventData());
            var result = qualityEventService.GetQualityEventById(id);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void SaveQualityEvent()
        {
            QualityEvent qualityEvent = QualityEventViewModel();
            System.Boolean id = false;
            qualityEventData.Setup(p=>p.SaveQualityEvent(qualityEvent)).Returns(id);
            var result = qualityEventService.SaveQualityEvent(qualityEvent);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void UpdateQualityEvent()
        {
            QualityEvent qualityEvent = QualityEventViewModel();
            bool id = false;
            qualityEventData.Setup(p=>p.UpdateQualityEvent(qualityEvent)).Returns(id);
            var result = qualityEventService.UpdateQualityEvent(qualityEvent);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void DeleteQualityEventById()
        {
            int id = 0;
            bool result = false;
            qualityEventData.Setup(p=>p.DeleteQualityEventById(id)).Returns(result);
            var qualityEvent = qualityEventService.DeleteQualityEventById(id);
            Assert.IsNotNull(qualityEvent);
        }
        
        public DataSet MockQualityEventData()
        {
            DataSet dataset = new DataSet();
            DataTable dataTable = new DataTable();
            dataset.Tables.Add(dataTable);
            return dataset;
        }
        
        public QualityEvent QualityEventViewModel()
        {
            try
            {
                QualityEvent qualityEvent = new QualityEvent();
                return qualityEvent;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
    }
}
