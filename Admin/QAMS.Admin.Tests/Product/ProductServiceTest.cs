//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QAMS.Tests
{
    using System;
    using System.Data;
    using System.Data.SqlClient;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using QAMS.Common.Entities;
    using QAMS.Admin.Entities;
    using QAMS.Admin.Data;
    using QAMS.Admin.Services;
    using Moq;
    using NUnit.Framework;
    
    
    /// <summary>
    /// Comment
    /// </summary>
    public class ProductTest
    {
        
        private Mock<IProductData> productData;
        
        private IProductService productService;
        
        [SetUp()]
        public void Setup()
        {
              productData = new Mock<IProductData>();
              productService = new ProductService(productData.Object);
        }
        
        [Test()]
        public void GetAllProduct()
        {
            List<Product> product = new List<Product>();
            RequestContext requestContext = new RequestContext();
            requestContext.PageNumber=1;
            requestContext.PageSize=10;
            productData.Setup(p=>p.GetAllProduct(requestContext)).Returns(MockProductData());
            var result = productService.GetAllProduct(requestContext);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void GetProductById()
        {
            int id = 0;
            productData.Setup(p=>p.GetProductById(id)).Returns(MockProductData());
            var result = productService.GetProductById(id);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void SaveProduct()
        {
            Product product = ProductViewModel();
            System.Boolean id = false;
            productData.Setup(p=>p.SaveProduct(product)).Returns(id);
            var result = productService.SaveProduct(product);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void UpdateProduct()
        {
            Product product = ProductViewModel();
            bool id = false;
            productData.Setup(p=>p.UpdateProduct(product)).Returns(id);
            var result = productService.UpdateProduct(product);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void DeleteProductById()
        {
            int id = 0;
            bool result = false;
            productData.Setup(p=>p.DeleteProductById(id)).Returns(result);
            var product = productService.DeleteProductById(id);
            Assert.IsNotNull(product);
        }
        
        public DataSet MockProductData()
        {
            DataSet dataset = new DataSet();
            DataTable dataTable = new DataTable();
            dataset.Tables.Add(dataTable);
            return dataset;
        }
        
        public Product ProductViewModel()
        {
            try
            {
                Product product = new Product();
                return product;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
    }
}
