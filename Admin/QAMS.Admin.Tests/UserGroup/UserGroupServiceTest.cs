//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QAMS.Tests
{
    using System;
    using System.Data;
    using System.Data.SqlClient;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using QAMS.Common.Entities;
    using QAMS.Admin.Entities;
    using QAMS.Admin.Data;
    using QAMS.Admin.Services;
    using Moq;
    using NUnit.Framework;
    
    
    /// <summary>
    /// Comment
    /// </summary>
    public class UserGroupTest
    {
        
        private Mock<IUserGroupData> userGroupData;
        
        private IUserGroupService userGroupService;
        
        [SetUp()]
        public void Setup()
        {
              userGroupData = new Mock<IUserGroupData>();
              userGroupService = new UserGroupService(userGroupData.Object);
        }
        
        [Test()]
        public void GetAllUserGroup()
        {
            List<UserGroup> userGroup = new List<UserGroup>();
            RequestContext requestContext = new RequestContext();
            requestContext.PageNumber=1;
            requestContext.PageSize=10;
            userGroupData.Setup(p=>p.GetAllUserGroup(requestContext)).Returns(MockUserGroupData());
            var result = userGroupService.GetAllUserGroup(requestContext);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void GetUserGroupById()
        {
            int id = 0;
            userGroupData.Setup(p=>p.GetUserGroupById(id)).Returns(MockUserGroupData());
            var result = userGroupService.GetUserGroupById(id);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void SaveUserGroup()
        {
            UserGroup userGroup = UserGroupViewModel();
            System.Boolean id = false;
            userGroupData.Setup(p=>p.SaveUserGroup(userGroup)).Returns(id);
            var result = userGroupService.SaveUserGroup(userGroup);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void UpdateUserGroup()
        {
            UserGroup userGroup = UserGroupViewModel();
            bool id = false;
            userGroupData.Setup(p=>p.UpdateUserGroup(userGroup)).Returns(id);
            var result = userGroupService.UpdateUserGroup(userGroup);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void DeleteUserGroupById()
        {
            int id = 0;
            bool result = false;
            userGroupData.Setup(p=>p.DeleteUserGroupById(id)).Returns(result);
            var userGroup = userGroupService.DeleteUserGroupById(id);
            Assert.IsNotNull(userGroup);
        }
        
        public DataSet MockUserGroupData()
        {
            DataSet dataset = new DataSet();
            DataTable dataTable = new DataTable();
            dataset.Tables.Add(dataTable);
            return dataset;
        }
        
        public UserGroup UserGroupViewModel()
        {
            try
            {
                UserGroup userGroup = new UserGroup();
                return userGroup;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
    }
}
