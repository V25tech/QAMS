//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QAMS.Tests
{
    using System;
    using System.Data;
    using System.Data.SqlClient;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using QAMS.Common.Entities;
    using QAMS.Admin.Entities;
    using QAMS.Admin.Data;
    using QAMS.Admin.Services;
    using Moq;
    using NUnit.Framework;
    
    
    /// <summary>
    /// Comment
    /// </summary>
    public class MarketTest
    {
        
        private Mock<IMarketData> marketData;
        
        private IMarketService marketService;
        
        [SetUp()]
        public void Setup()
        {
              marketData = new Mock<IMarketData>();
              marketService = new MarketService(marketData.Object);
        }
        
        [Test()]
        public void GetAllMarket()
        {
            List<Market> market = new List<Market>();
            RequestContext requestContext = new RequestContext();
            requestContext.PageNumber=1;
            requestContext.PageSize=10;
            marketData.Setup(p=>p.GetAllMarket(requestContext)).Returns(MockMarketData());
            var result = marketService.GetAllMarket(requestContext);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void GetMarketById()
        {
            int id = 0;
            marketData.Setup(p=>p.GetMarketById(id)).Returns(MockMarketData());
            var result = marketService.GetMarketById(id);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void SaveMarket()
        {
            Market market = MarketViewModel();
            System.Boolean id = false;
            marketData.Setup(p=>p.SaveMarket(market)).Returns(id);
            var result = marketService.SaveMarket(market);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void UpdateMarket()
        {
            Market market = MarketViewModel();
            bool id = false;
            marketData.Setup(p=>p.UpdateMarket(market)).Returns(id);
            var result = marketService.UpdateMarket(market);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void DeleteMarketById()
        {
            int id = 0;
            bool result = false;
            marketData.Setup(p=>p.DeleteMarketById(id)).Returns(result);
            var market = marketService.DeleteMarketById(id);
            Assert.IsNotNull(market);
        }
        
        public DataSet MockMarketData()
        {
            DataSet dataset = new DataSet();
            DataTable dataTable = new DataTable();
            dataset.Tables.Add(dataTable);
            return dataset;
        }
        
        public Market MarketViewModel()
        {
            try
            {
                Market market = new Market();
                return market;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
    }
}
