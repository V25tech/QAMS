//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QAMS.Tests
{
    using System;
    using System.Data;
    using System.Data.SqlClient;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using QAMS.Common.Entities;
    using QAMS.Admin.Entities;
    using QAMS.Admin.Data;
    using QAMS.Admin.Services;
    using Moq;
    using NUnit.Framework;
    
    
    /// <summary>
    /// Comment
    /// </summary>
    public class SecuritySettingTest
    {
        
        private Mock<ISecuritySettingData> securitySettingData;
        
        private ISecuritySettingService securitySettingService;
        
        [SetUp()]
        public void Setup()
        {
              securitySettingData = new Mock<ISecuritySettingData>();
              securitySettingService = new SecuritySettingService(securitySettingData.Object);
        }
        
        [Test()]
        public void GetAllSecuritySetting()
        {
            List<SecuritySetting> securitySetting = new List<SecuritySetting>();
            RequestContext requestContext = new RequestContext();
            requestContext.PageNumber=1;
            requestContext.PageSize=10;
            securitySettingData.Setup(p=>p.GetAllSecuritySetting(requestContext)).Returns(MockSecuritySettingData());
            var result = securitySettingService.GetAllSecuritySetting(requestContext);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void GetSecuritySettingById()
        {
            int id = 0;
            securitySettingData.Setup(p=>p.GetSecuritySettingById(id)).Returns(MockSecuritySettingData());
            var result = securitySettingService.GetSecuritySettingById(id);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void SaveSecuritySetting()
        {
            SecuritySetting securitySetting = SecuritySettingViewModel();
            System.Boolean id = false;
            securitySettingData.Setup(p=>p.SaveSecuritySetting(securitySetting)).Returns(id);
            var result = securitySettingService.SaveSecuritySetting(securitySetting);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void UpdateSecuritySetting()
        {
            SecuritySetting securitySetting = SecuritySettingViewModel();
            bool id = false;
            securitySettingData.Setup(p=>p.UpdateSecuritySetting(securitySetting)).Returns(id);
            var result = securitySettingService.UpdateSecuritySetting(securitySetting);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void DeleteSecuritySettingById()
        {
            int id = 0;
            bool result = false;
            securitySettingData.Setup(p=>p.DeleteSecuritySettingById(id)).Returns(result);
            var securitySetting = securitySettingService.DeleteSecuritySettingById(id);
            Assert.IsNotNull(securitySetting);
        }
        
        public DataSet MockSecuritySettingData()
        {
            DataSet dataset = new DataSet();
            DataTable dataTable = new DataTable();
            dataset.Tables.Add(dataTable);
            return dataset;
        }
        
        public SecuritySetting SecuritySettingViewModel()
        {
            try
            {
                SecuritySetting securitySetting = new SecuritySetting();
                return securitySetting;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
    }
}
