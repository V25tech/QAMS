//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QAMS.Tests
{
    using System;
    using System.Data;
    using System.Data.SqlClient;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using QAMS.Common.Entities;
    using QAMS.Admin.Entities;
    using QAMS.Admin.Data;
    using QAMS.Admin.Services;
    using Moq;
    using NUnit.Framework;
    
    
    /// <summary>
    /// Comment
    /// </summary>
    public class EquipmentTest
    {
        
        private Mock<IEquipmentData> equipmentData;
        
        private IEquipmentService equipmentService;
        
        [SetUp()]
        public void Setup()
        {
              equipmentData = new Mock<IEquipmentData>();
              equipmentService = new EquipmentService(equipmentData.Object);
        }
        
        [Test()]
        public void GetAllEquipment()
        {
            List<Equipment> equipment = new List<Equipment>();
            RequestContext requestContext = new RequestContext();
            requestContext.PageNumber=1;
            requestContext.PageSize=10;
            equipmentData.Setup(p=>p.GetAllEquipment(requestContext)).Returns(MockEquipmentData());
            var result = equipmentService.GetAllEquipment(requestContext);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void GetEquipmentById()
        {
            int id = 0;
            equipmentData.Setup(p=>p.GetEquipmentById(id)).Returns(MockEquipmentData());
            var result = equipmentService.GetEquipmentById(id);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void SaveEquipment()
        {
            Equipment equipment = EquipmentViewModel();
            System.Boolean id = false;
            equipmentData.Setup(p=>p.SaveEquipment(equipment)).Returns(id);
            var result = equipmentService.SaveEquipment(equipment);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void UpdateEquipment()
        {
            Equipment equipment = EquipmentViewModel();
            bool id = false;
            equipmentData.Setup(p=>p.UpdateEquipment(equipment)).Returns(id);
            var result = equipmentService.UpdateEquipment(equipment);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void DeleteEquipmentById()
        {
            int id = 0;
            bool result = false;
            equipmentData.Setup(p=>p.DeleteEquipmentById(id)).Returns(result);
            var equipment = equipmentService.DeleteEquipmentById(id);
            Assert.IsNotNull(equipment);
        }
        
        public DataSet MockEquipmentData()
        {
            DataSet dataset = new DataSet();
            DataTable dataTable = new DataTable();
            dataset.Tables.Add(dataTable);
            return dataset;
        }
        
        public Equipment EquipmentViewModel()
        {
            try
            {
                Equipment equipment = new Equipment();
                return equipment;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
    }
}
