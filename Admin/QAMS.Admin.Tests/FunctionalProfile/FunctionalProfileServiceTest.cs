//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QAMS.Tests
{
    using System;
    using System.Data;
    using System.Data.SqlClient;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using QAMS.Common.Entities;
    using QAMS.Admin.Entities;
    using QAMS.Admin.Data;
    using QAMS.Admin.Services;
    using Moq;
    using NUnit.Framework;
    
    
    /// <summary>
    /// Comment
    /// </summary>
    public class FunctionalProfileTest
    {
        
        private Mock<IFunctionalProfileData> functionalProfileData;
        
        private IFunctionalProfileService functionalProfileService;
        
        [SetUp()]
        public void Setup()
        {
              functionalProfileData = new Mock<IFunctionalProfileData>();
              functionalProfileService = new FunctionalProfileService(functionalProfileData.Object);
        }
        
        [Test()]
        public void GetAllFunctionalProfile()
        {
            List<FunctionalProfile> functionalProfile = new List<FunctionalProfile>();
            RequestContext requestContext = new RequestContext();
            requestContext.PageNumber=1;
            requestContext.PageSize=10;
            functionalProfileData.Setup(p=>p.GetAllFunctionalProfile(requestContext)).Returns(MockFunctionalProfileData());
            var result = functionalProfileService.GetAllFunctionalProfile(requestContext);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void GetFunctionalProfileById()
        {
            int id = 0;
            functionalProfileData.Setup(p=>p.GetFunctionalProfileById(id)).Returns(MockFunctionalProfileData());
            var result = functionalProfileService.GetFunctionalProfileById(id);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void SaveFunctionalProfile()
        {
            FunctionalProfile functionalProfile = FunctionalProfileViewModel();
            System.Boolean id = false;
            functionalProfileData.Setup(p=>p.SaveFunctionalProfile(functionalProfile)).Returns(id);
            var result = functionalProfileService.SaveFunctionalProfile(functionalProfile);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void UpdateFunctionalProfile()
        {
            FunctionalProfile functionalProfile = FunctionalProfileViewModel();
            bool id = false;
            functionalProfileData.Setup(p=>p.UpdateFunctionalProfile(functionalProfile)).Returns(id);
            var result = functionalProfileService.UpdateFunctionalProfile(functionalProfile);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void DeleteFunctionalProfileById()
        {
            int id = 0;
            bool result = false;
            functionalProfileData.Setup(p=>p.DeleteFunctionalProfileById(id)).Returns(result);
            var functionalProfile = functionalProfileService.DeleteFunctionalProfileById(id);
            Assert.IsNotNull(functionalProfile);
        }
        
        public DataSet MockFunctionalProfileData()
        {
            DataSet dataset = new DataSet();
            DataTable dataTable = new DataTable();
            dataset.Tables.Add(dataTable);
            return dataset;
        }
        
        public FunctionalProfile FunctionalProfileViewModel()
        {
            try
            {
                FunctionalProfile functionalProfile = new FunctionalProfile();
                return functionalProfile;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
    }
}
