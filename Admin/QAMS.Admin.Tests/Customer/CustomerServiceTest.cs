//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QAMS.Tests
{
    using System;
    using System.Data;
    using System.Data.SqlClient;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using QAMS.Common.Entities;
    using QAMS.Admin.Entities;
    using QAMS.Admin.Data;
    using QAMS.Admin.Services;
    using Moq;
    using NUnit.Framework;
    
    
    /// <summary>
    /// Comment
    /// </summary>
    public class CustomerTest
    {
        
        private Mock<ICustomerData> customerData;
        
        private ICustomerService customerService;
        
        [SetUp()]
        public void Setup()
        {
              customerData = new Mock<ICustomerData>();
              customerService = new CustomerService(customerData.Object);
        }
        
        [Test()]
        public void GetAllCustomer()
        {
            List<Customer> customer = new List<Customer>();
            RequestContext requestContext = new RequestContext();
            requestContext.PageNumber=1;
            requestContext.PageSize=10;
            customerData.Setup(p=>p.GetAllCustomer(requestContext)).Returns(MockCustomerData());
            var result = customerService.GetAllCustomer(requestContext);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void GetCustomerById()
        {
            int id = 0;
            customerData.Setup(p=>p.GetCustomerById(id)).Returns(MockCustomerData());
            var result = customerService.GetCustomerById(id);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void SaveCustomer()
        {
            Customer customer = CustomerViewModel();
            System.Boolean id = false;
            customerData.Setup(p=>p.SaveCustomer(customer)).Returns(id);
            var result = customerService.SaveCustomer(customer);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void UpdateCustomer()
        {
            Customer customer = CustomerViewModel();
            bool id = false;
            customerData.Setup(p=>p.UpdateCustomer(customer)).Returns(id);
            var result = customerService.UpdateCustomer(customer);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void DeleteCustomerById()
        {
            int id = 0;
            bool result = false;
            customerData.Setup(p=>p.DeleteCustomerById(id)).Returns(result);
            var customer = customerService.DeleteCustomerById(id);
            Assert.IsNotNull(customer);
        }
        
        public DataSet MockCustomerData()
        {
            DataSet dataset = new DataSet();
            DataTable dataTable = new DataTable();
            dataset.Tables.Add(dataTable);
            return dataset;
        }
        
        public Customer CustomerViewModel()
        {
            try
            {
                Customer customer = new Customer();
                return customer;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
    }
}
