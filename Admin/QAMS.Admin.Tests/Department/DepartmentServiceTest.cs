//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QAMS.Tests
{
    using System;
    using System.Data;
    using System.Data.SqlClient;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using QAMS.Common.Entities;
    using QAMS.Admin.Entities;
    using QAMS.Admin.Data;
    using QAMS.Admin.Services;
    using Moq;
    using NUnit.Framework;
    
    
    /// <summary>
    /// Comment
    /// </summary>
    public class DepartmentTest
    {
        
        private Mock<IDepartmentData> departmentData;
        
        private IDepartmentService departmentService;
        
        [SetUp()]
        public void Setup()
        {
              departmentData = new Mock<IDepartmentData>();
              departmentService = new DepartmentService(departmentData.Object);
        }
        
        [Test()]
        public void GetAllDepartment()
        {
            List<Department> department = new List<Department>();
            RequestContext requestContext = new RequestContext();
            requestContext.PageNumber=1;
            requestContext.PageSize=10;
            departmentData.Setup(p=>p.GetAllDepartment(requestContext)).Returns(MockDepartmentData());
            var result = departmentService.GetAllDepartment(requestContext);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void GetDepartmentById()
        {
            int id = 0;
            departmentData.Setup(p=>p.GetDepartmentById(id)).Returns(MockDepartmentData());
            var result = departmentService.GetDepartmentById(id);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void SaveDepartment()
        {
            Department department = DepartmentViewModel();
            System.Boolean id = false;
            departmentData.Setup(p=>p.SaveDepartment(department)).Returns(id);
            var result = departmentService.SaveDepartment(department);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void UpdateDepartment()
        {
            Department department = DepartmentViewModel();
            bool id = false;
            departmentData.Setup(p=>p.UpdateDepartment(department)).Returns(id);
            var result = departmentService.UpdateDepartment(department);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void DeleteDepartmentById()
        {
            int id = 0;
            bool result = false;
            departmentData.Setup(p=>p.DeleteDepartmentById(id)).Returns(result);
            var department = departmentService.DeleteDepartmentById(id);
            Assert.IsNotNull(department);
        }
        
        public DataSet MockDepartmentData()
        {
            DataSet dataset = new DataSet();
            DataTable dataTable = new DataTable();
            dataset.Tables.Add(dataTable);
            return dataset;
        }
        
        public Department DepartmentViewModel()
        {
            try
            {
                Department department = new Department();
                return department;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
    }
}
