//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QAMS.Tests
{
    using System;
    using System.Data;
    using System.Data.SqlClient;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using QAMS.Common.Entities;
    using QAMS.Admin.Entities;
    using QAMS.Admin.Data;
    using QAMS.Admin.Services;
    using Moq;
    using NUnit.Framework;
    
    
    /// <summary>
    /// Comment
    /// </summary>
    public class PlantTest
    {
        
        private Mock<IPlantData> plantData;
        
        private IPlantService plantService;
        
        [SetUp()]
        public void Setup()
        {
              plantData = new Mock<IPlantData>();
              plantService = new PlantService(plantData.Object);
        }
        
        [Test()]
        public void GetAllPlant()
        {
            List<Plant> plant = new List<Plant>();
            RequestContext requestContext = new RequestContext();
            requestContext.PageNumber=1;
            requestContext.PageSize=10;
            plantData.Setup(p=>p.GetAllPlant(requestContext)).Returns(MockPlantData());
            var result = plantService.GetAllPlant(requestContext);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void GetPlantById()
        {
            int id = 0;
            plantData.Setup(p=>p.GetPlantById(id)).Returns(MockPlantData());
            var result = plantService.GetPlantById(id);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void SavePlant()
        {
            Plant plant = PlantViewModel();
            System.Boolean id = false;
            plantData.Setup(p=>p.SavePlant(plant)).Returns(id);
            var result = plantService.SavePlant(plant);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void UpdatePlant()
        {
            Plant plant = PlantViewModel();
            bool id = false;
            plantData.Setup(p=>p.UpdatePlant(plant)).Returns(id);
            var result = plantService.UpdatePlant(plant);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void DeletePlantById()
        {
            int id = 0;
            bool result = false;
            plantData.Setup(p=>p.DeletePlantById(id)).Returns(result);
            var plant = plantService.DeletePlantById(id);
            Assert.IsNotNull(plant);
        }
        
        public DataSet MockPlantData()
        {
            DataSet dataset = new DataSet();
            DataTable dataTable = new DataTable();
            dataset.Tables.Add(dataTable);
            return dataset;
        }
        
        public Plant PlantViewModel()
        {
            try
            {
                Plant plant = new Plant();
                return plant;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
    }
}
