//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QAMS.Tests
{
    using System;
    using System.Data;
    using System.Data.SqlClient;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using QAMS.Common.Entities;
    using QAMS.Admin.Entities;
    using QAMS.Admin.Data;
    using QAMS.Admin.Services;
    using Moq;
    using NUnit.Framework;
    
    
    /// <summary>
    /// Comment
    /// </summary>
    public class RoleTest
    {
        
        private Mock<IRoleData> roleData;
        
        private IRoleService roleService;
        
        [SetUp()]
        public void Setup()
        {
              roleData = new Mock<IRoleData>();
              roleService = new RoleService(roleData.Object);
        }
        
        [Test()]
        public void GetAllRole()
        {
            List<Role> role = new List<Role>();
            RequestContext requestContext = new RequestContext();
            requestContext.PageNumber=1;
            requestContext.PageSize=10;
            roleData.Setup(p=>p.GetAllRole(requestContext)).Returns(MockRoleData());
            var result = roleService.GetAllRole(requestContext);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void GetRoleById()
        {
            int id = 0;
            roleData.Setup(p=>p.GetRoleById(id)).Returns(MockRoleData());
            var result = roleService.GetRoleById(id);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void SaveRole()
        {
            Role role = RoleViewModel();
            System.Boolean id = false;
            roleData.Setup(p=>p.SaveRole(role)).Returns(id);
            var result = roleService.SaveRole(role);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void UpdateRole()
        {
            Role role = RoleViewModel();
            bool id = false;
            roleData.Setup(p=>p.UpdateRole(role)).Returns(id);
            var result = roleService.UpdateRole(role);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void DeleteRoleById()
        {
            int id = 0;
            bool result = false;
            roleData.Setup(p=>p.DeleteRoleById(id)).Returns(result);
            var role = roleService.DeleteRoleById(id);
            Assert.IsNotNull(role);
        }
        
        public DataSet MockRoleData()
        {
            DataSet dataset = new DataSet();
            DataTable dataTable = new DataTable();
            dataset.Tables.Add(dataTable);
            return dataset;
        }
        
        public Role RoleViewModel()
        {
            try
            {
                Role role = new Role();
                return role;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
    }
}
