//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QAMS.Admin.Data
{
    using System;
    using System.Data;
    using System.Linq;
    using System.Data.SqlClient;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using QAMS.Common.Entities;
    using QAMS.Admin.Entities;
    using VAMLibrary.Core;
    using VAMLibrary.Core.Common;
    
    
    // Comment
    public class CustomerData : ICustomerData
    {
        
        private readonly DataAccessHelper dataAccessHelper;
        
        public CustomerData(DataAccessHelper dataAccessHelper)
        {
            this.dataAccessHelper = dataAccessHelper;
        }
        
        public DataSet GetAllCustomer(RequestContext requestContext)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = RequestContextConstants.PageNumber, Value = requestContext.PageNumber });
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = RequestContextConstants.PageSize, Value = requestContext.PageSize });
                DataSet dataset = (DataSet)dataAccessHelper.ExecuteStoredProcedure(CustomerConstants.USP_Customer_PSY_GET_ALL, sqlparms, ExecutionType.Dataset);
                return dataset;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public DataSet GetCustomerById(System.Int32? id)
        {
            try
            {
                DataSet dataset = (DataSet)dataAccessHelper.ExecuteStoredProcedure(CustomerConstants.USP_Customer_PSY_GET, CustomerConstants.Id, DbType.Int32, id, ExecutionType.Dataset);
                return dataset;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool SaveCustomer(CustomerRegistration customer)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = CustomerConstants.Name, Value = customer.name });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = CustomerConstants.Code, Value = customer.uniqueCode });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = CustomerConstants.ContactName, Value = customer.contactName });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = CustomerConstants.Address, Value = customer.address });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = CustomerConstants.City, Value = customer.city });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = CustomerConstants.State, Value = customer.state });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = CustomerConstants.Country, Value = customer.country });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = CustomerConstants.Zipcode, Value = customer.zipcode });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = CustomerConstants.Fax, Value = customer.fax });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = CustomerConstants.Email, Value = customer.email });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = CustomerConstants.Remark, Value = customer.remark });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = CustomerConstants.CreatedBy, Value = customer.createdBy });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = CustomerConstants.ModifiedBy, Value = customer.ModifiedBy });
                Object result = dataAccessHelper.ExecuteStoredProcedure(CustomerConstants.USP_Customer_PSY_INSERT, sqlparms, ExecutionType.Scalar);
                return (Convert.ToInt32(result) > 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool UpdateCustomer(CustomerRegistration customer)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = CustomerConstants.Id, Value = customer.Id });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = CustomerConstants.Name, Value = customer.name });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = CustomerConstants.Code, Value = customer.uniqueCode });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = CustomerConstants.ContactName, Value = customer.contactName });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = CustomerConstants.Address, Value = customer.address });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = CustomerConstants.City, Value = customer.city });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = CustomerConstants.State, Value = customer.state });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = CustomerConstants.Country, Value = customer.country });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = CustomerConstants.Zipcode, Value = customer.zipcode });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = CustomerConstants.Fax, Value = customer.fax });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = CustomerConstants.Email, Value = customer.email });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = CustomerConstants.Remark, Value = customer.remark });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = CustomerConstants.ModifiedBy, Value = customer.ModifiedBy });
                Object result = dataAccessHelper.ExecuteStoredProcedure(CustomerConstants.USP_Customer_PSY_UPDATE, sqlparms, ExecutionType.Scalar);
                return (Convert.ToInt32(result) > 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteCustomerById(System.Int32? id)
        {
            try
            {
                var result = dataAccessHelper.ExecuteStoredProcedure(CustomerConstants.USP_Customer_PSY_DELETE, CustomerConstants.Id, DbType.Int32, id, ExecutionType.NonQuery);
                return (Convert.ToInt32(result) >= 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteAllCustomer(List<int> ids)
        {
            try
            {
                var result = dataAccessHelper.ExecuteStoredProcedure(CustomerConstants.USP_Customer_PSY_DELETE_ALL, CustomerConstants.Id, DbType.String, string.Join(',',  ids), ExecutionType.NonQuery);
                return (Convert.ToInt32(result) >= 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
    }
}
