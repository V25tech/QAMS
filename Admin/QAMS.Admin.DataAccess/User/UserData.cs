//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QAMS.Admin.Data
{
    using System;
    using System.Data;
    using System.Linq;
    using System.Data.SqlClient;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using QAMS.Common.Entities;
    using QAMS.Admin.Entities;
    using VAMLibrary.Core;
    using VAMLibrary.Core.Common;


    // Comment
    public class UserData : IUserData
    {

        private readonly DataAccessHelper dataAccessHelper;

        public UserData(DataAccessHelper dataAccessHelper)
        {
            this.dataAccessHelper = dataAccessHelper;
        }

        public DataSet GetAllUser(RequestContext requestContext)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = RequestContextConstants.PageNumber, Value = requestContext.PageNumber });
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = RequestContextConstants.PageSize, Value = requestContext.PageSize });
                DataSet dataset = (DataSet)dataAccessHelper.ExecuteStoredProcedure(UserConstants.USP_User_PSY_GET_ALL, sqlparms, ExecutionType.Dataset);
                return dataset;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }

        public DataSet GetUserById(System.Int32? id)
        {
            try
            {
                DataSet dataset = (DataSet)dataAccessHelper.ExecuteStoredProcedure(UserConstants.USP_User_PSY_GET, UserConstants.Id, DbType.Int32, id, ExecutionType.Dataset);
                return dataset;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }

        public DataSet GetUserByUserName(string p_UserName)
        {
            try
            {
                DataSet dataset = (DataSet)dataAccessHelper.ExecuteStoredProcedure("dbo.USP_User_PSY_GET_BY_USER_NAME", "@Userd_PSY", DbType.String, p_UserName, ExecutionType.Dataset);
                return dataset;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }

        public DataSet GetUserByUserName(User user)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = UserConstants.user_id, Value = user.userName });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = UserConstants.password, Value = user.Password });
                DataSet dataset = (DataSet)dataAccessHelper.ExecuteStoredProcedure(UserConstants.USP_User_PSY_GET_NAME, sqlparms, ExecutionType.Dataset);
                return dataset;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }

        public bool SaveUser(User user)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = UserConstants.RoleId, Value = user.roleid });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = UserConstants.UserId, Value = user.userId });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = UserConstants.FirstName, Value = user.FirstName });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = UserConstants.Plants, Value = user.Plants });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = UserConstants.LastName, Value = user.LastName });
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = UserConstants.DepartmentId, Value = user.departmentid });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = UserConstants.EmployeeId, Value = user.employeeId });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = UserConstants.EmailId, Value = user.email });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = UserConstants.Password, Value = user.Password });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = UserConstants.IsActive, Value = user.IsActive });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = UserConstants.ForgotLoginPassword, Value = user.ForgotLoginPassword });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = UserConstants.CreatedBy, Value = user.CreatedBy });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = UserConstants.ModifiedBy, Value = user.ModifiedBy });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = UserConstants.UseName, Value = user.userName });

                Object result = dataAccessHelper.ExecuteStoredProcedure(UserConstants.USP_User_PSY_INSERT, sqlparms, ExecutionType.Scalar);
                return (Convert.ToInt32(result) > 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }

        public bool UpdateUser(User user)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = UserConstants.Id, Value = user.Id });
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = UserConstants.RoleId, Value = user.roleid });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = UserConstants.UserId, Value = user.userId });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = UserConstants.FirstName, Value = user.FirstName });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = UserConstants.Plants, Value = user.roleid.ToString() });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = UserConstants.LastName, Value = user.LastName });
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = UserConstants.DepartmentId, Value = user.departmentid });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = UserConstants.EmployeeId, Value = user.employeeId });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = UserConstants.EmailId, Value = user.email });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = UserConstants.Password, Value = user.Password });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = UserConstants.IsActive, Value = user.IsActive });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = UserConstants.ForgotLoginPassword, Value = user.ForgotLoginPassword });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = UserConstants.ModifiedBy, Value = user.ModifiedBy });
                Object result = dataAccessHelper.ExecuteStoredProcedure(UserConstants.USP_User_PSY_UPDATE, sqlparms, ExecutionType.Scalar);
                return (Convert.ToInt32(result) > 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }

        public bool DeleteUserById(System.Int32? id)
        {
            try
            {
                var result = dataAccessHelper.ExecuteStoredProcedure(UserConstants.USP_User_PSY_DELETE, UserConstants.Id, DbType.Int32, id, ExecutionType.NonQuery);
                return (Convert.ToInt32(result) >= 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }

        public bool DeleteAllUser(List<int> ids)
        {
            try
            {
                var result = dataAccessHelper.ExecuteStoredProcedure(UserConstants.USP_User_PSY_DELETE_ALL, UserConstants.Id, DbType.String, string.Join(',', ids), ExecutionType.NonQuery);
                return (Convert.ToInt32(result) >= 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }

        public DataSet GetUserByRoleId(System.Int32? id)
        {
            try
            {
                DataSet dataset = (DataSet)dataAccessHelper.ExecuteStoredProcedure(UserConstants.USP_User_PSY_By_Id_GET, "@Id", DbType.Int32, id, ExecutionType.Dataset);
                return dataset;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }

        public DataSet GetUserByDepartmentId(System.Int32? id)
        {
            try
            {
                DataSet dataset = (DataSet)dataAccessHelper.ExecuteStoredProcedure(UserConstants.USP_User_PSY_By_Id_GET, "@Id", DbType.Int32, id, ExecutionType.Dataset);
                return dataset;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }

        public bool DeleteUserByRoleId(System.Int32? id)
        {
            try
            {
                var result = dataAccessHelper.ExecuteStoredProcedure(UserConstants.USP_User_PSY_By_Id_DELETE, "@Id", DbType.Int32, id, ExecutionType.NonQuery);
                return (Convert.ToInt32(result) >= 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }

        public bool DeleteUserByDepartmentId(System.Int32? id)
        {
            try
            {
                var result = dataAccessHelper.ExecuteStoredProcedure(UserConstants.USP_User_PSY_By_Id_DELETE, "@Id", DbType.Int32, id, ExecutionType.NonQuery);
                return (Convert.ToInt32(result) >= 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
    }
}
