//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QAMS.Admin.Data
{
    using System;
    using System.Data;
    using System.Linq;
    using System.Data.SqlClient;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using QAMS.Common.Entities;
    using QAMS.Admin.Entities;
    using VAMLibrary.Core;
    using VAMLibrary.Core.Common;
    
    
    // Comment
    public class UserGroupData : IUserGroupData
    {
        
        private readonly DataAccessHelper dataAccessHelper;
        
        public UserGroupData(DataAccessHelper dataAccessHelper)
        {
            this.dataAccessHelper = dataAccessHelper;
        }
        
        public DataSet GetAllUserGroup(RequestContext requestContext)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = RequestContextConstants.PageNumber, Value = requestContext.PageNumber });
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = RequestContextConstants.PageSize, Value = requestContext.PageSize });
                DataSet dataset = (DataSet)dataAccessHelper.ExecuteStoredProcedure(UserGroupConstants.USP_UserGroup_PSY_GET_ALL, sqlparms, ExecutionType.Dataset);
                return dataset;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public DataSet GetUserGroupById(System.Int32? id)
        {
            try
            {
                DataSet dataset = (DataSet)dataAccessHelper.ExecuteStoredProcedure(UserGroupConstants.USP_UserGroup_PSY_GET, UserGroupConstants.Id, DbType.Int32, id, ExecutionType.Dataset);
                return dataset;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool SaveUserGroup(UserGroup userGroup)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = UserGroupConstants.Name, Value = userGroup.name });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = UserGroupConstants.Code, Value = userGroup.code });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = UserGroupConstants.Roles, Value = userGroup.roles });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = UserGroupConstants.Remarks, Value = userGroup.remarks });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = UserGroupConstants.CreatedBy, Value = userGroup.createdBy });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = UserGroupConstants.ModifiedBy, Value = userGroup.modifiedBy });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = UserGroupConstants.userMetadata, Value = userGroup.userMetdata });
                Object result = dataAccessHelper.ExecuteStoredProcedure(UserGroupConstants.USP_UserGroup_PSY_INSERT, sqlparms, ExecutionType.Scalar);
                return (Convert.ToInt32(result) > 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool UpdateUserGroup(UserGroup userGroup)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = UserGroupConstants.Id, Value = userGroup.id });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = UserGroupConstants.Name, Value = userGroup.name });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = UserGroupConstants.Code, Value = userGroup.code });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = UserGroupConstants.Roles, Value = userGroup.roles });
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = UserGroupConstants.Revision, Value = userGroup.revision });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = UserGroupConstants.ModifiedBy, Value = userGroup.modifiedBy });
                Object result = dataAccessHelper.ExecuteStoredProcedure(UserGroupConstants.USP_UserGroup_PSY_UPDATE, sqlparms, ExecutionType.Scalar);
                return (Convert.ToInt32(result) > 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteUserGroupById(System.Int32? id)
        {
            try
            {
                var result = dataAccessHelper.ExecuteStoredProcedure(UserGroupConstants.USP_UserGroup_PSY_DELETE, UserGroupConstants.Id, DbType.Int32, id, ExecutionType.NonQuery);
                return (Convert.ToInt32(result) >= 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteAllUserGroup(List<int> ids)
        {
            try
            {
                var result = dataAccessHelper.ExecuteStoredProcedure(UserGroupConstants.USP_UserGroup_PSY_DELETE_ALL, UserGroupConstants.Id, DbType.String, string.Join(',',  ids), ExecutionType.NonQuery);
                return (Convert.ToInt32(result) >= 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
    }
}
