//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QAMS.Admin.Data
{
    using System;
    using System.Data;
    using System.Linq;
    using System.Data.SqlClient;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using QAMS.Common.Entities;
    using QAMS.Admin.Entities;
    using VAMLibrary.Core;
    using VAMLibrary.Core.Common;
    
    
    // Comment
    public class FunctionalProfileData : IFunctionalProfileData
    {
        
        private readonly DataAccessHelper dataAccessHelper;
        
        public FunctionalProfileData(DataAccessHelper dataAccessHelper)
        {
            this.dataAccessHelper = dataAccessHelper;
        }
        
        public DataSet GetAllFunctionalProfile(RequestContext requestContext)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = RequestContextConstants.PageNumber, Value = requestContext.PageNumber });
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = RequestContextConstants.PageSize, Value = requestContext.PageSize });
                DataSet dataset = (DataSet)dataAccessHelper.ExecuteStoredProcedure(FunctionalProfileConstants.USP_FunctionalProfile_PSY_GET_ALL, sqlparms, ExecutionType.Dataset);
                return dataset;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public DataSet GetFunctionalProfileById(System.Int32? id)
        {
            try
            {
                DataSet dataset = (DataSet)dataAccessHelper.ExecuteStoredProcedure(FunctionalProfileConstants.USP_FunctionalProfile_PSY_GET, FunctionalProfileConstants.Id, DbType.Int32, id, ExecutionType.Dataset);
                return dataset;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool SaveFunctionalProfile(FunctionalProfile functionalProfile)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = FunctionalProfileConstants.RoleId, Value = functionalProfile.RoleId });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.ChangeControlInitiation, Value = functionalProfile.ChangeControlInitiation });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.CCHODReview, Value = functionalProfile.CCHODReview });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.CCQAReview, Value = functionalProfile.CCQAReview });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.CCCFTReview, Value = functionalProfile.CCCFTReview });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.CCCustomerNotification, Value = functionalProfile.CCCustomerNotification });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.CCQADecision, Value = functionalProfile.CCQADecision });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.CCActionPlan, Value = functionalProfile.CCActionPlan });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.CCFinalClosure, Value = functionalProfile.CCFinalClosure });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.CCExtensionOfTargetDate, Value = functionalProfile.CCExtensionOfTargetDate });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.CCWorkTransfer, Value = functionalProfile.CCWorkTransfer });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.CCDossierPrint, Value = functionalProfile.CCDossierPrint });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.CCAuditTrial, Value = functionalProfile.CCAuditTrial });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.CCReport, Value = functionalProfile.CCReport });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.DeviationInitiation, Value = functionalProfile.DeviationInitiation });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.DIHODReview, Value = functionalProfile.DIHODReview });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.DIQAReview, Value = functionalProfile.DIQAReview });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.DICFTReview, Value = functionalProfile.DICFTReview });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.DICustomerNotification, Value = functionalProfile.DICustomerNotification });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.QAManager, Value = functionalProfile.QAManager });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.Investigation, Value = functionalProfile.Investigation });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.DIQADecision, Value = functionalProfile.DIQADecision });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.DIActionPlan, Value = functionalProfile.DIActionPlan });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.DIFinalClosure, Value = functionalProfile.DIFinalClosure });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.DIExtensionOfTargetDate, Value = functionalProfile.DIExtensionOfTargetDate });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.DIWorkTransfer, Value = functionalProfile.DIWorkTransfer });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.DIDossierPrint, Value = functionalProfile.DIDossierPrint });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.DIAuditTrial, Value = functionalProfile.DIAuditTrial });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.DIReport, Value = functionalProfile.DIReport });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.CAPAInitiation, Value = functionalProfile.CAPAInitiation });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.CAPAHODReview, Value = functionalProfile.CAPAHODReview });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.CAPAQAReview, Value = functionalProfile.CAPAQAReview });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.CAPACFTReview, Value = functionalProfile.CAPACFTReview });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.CAPAQADecision, Value = functionalProfile.CAPAQADecision });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.CAPAActionPlan, Value = functionalProfile.CAPAActionPlan });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.CAPAFinalClosure, Value = functionalProfile.CAPAFinalClosure });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.CAPAExtensionOfTargetDate, Value = functionalProfile.CAPAExtensionOfTargetDate });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.CAPAWorkTransfer, Value = functionalProfile.CAPAWorkTransfer });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.CAPADossierPrint, Value = functionalProfile.CAPADossierPrint });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.CAPAAuditTrial, Value = functionalProfile.CAPAAuditTrial });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.CAPAReport, Value = functionalProfile.CAPAReport });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.SecuritySetting, Value = functionalProfile.SecuritySetting });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.NewRole, Value = functionalProfile.NewRole });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.SetFunctionalProfile, Value = functionalProfile.SetFunctionalProfile });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.NewUser, Value = functionalProfile.NewUser });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.NewUserApproval, Value = functionalProfile.NewUserApproval });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.PlantAssignment, Value = functionalProfile.PlantAssignment });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.ModifyPlantAssignment, Value = functionalProfile.ModifyPlantAssignment });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.UserGroup, Value = functionalProfile.UserGroup });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.ModifyUserGroup, Value = functionalProfile.ModifyUserGroup });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.UserAccountStatus, Value = functionalProfile.UserAccountStatus });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.Reset_LoginPassword, Value = functionalProfile.ResetLoginPassword });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.ModifyUser, Value = functionalProfile.ModifyUser });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.ProductOrMaterialRegistration, Value = functionalProfile.ProductOrMaterialRegistration });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.BatchOrLotParticulars, Value = functionalProfile.BatchOrLotParticulars });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.EquipmentRegistration, Value = functionalProfile.EquipmentRegistration });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.MarketRegistration, Value = functionalProfile.MarketRegistration });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.CustomerRegistration, Value = functionalProfile.CustomerRegistration });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.AuditTrial, Value = functionalProfile.AuditTrial });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = FunctionalProfileConstants.Remark, Value = functionalProfile.Remark });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = FunctionalProfileConstants.CreatedBy, Value = functionalProfile.CreatedBy });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = FunctionalProfileConstants.ModifiedBy, Value = functionalProfile.ModifiedBy });
                Object result = dataAccessHelper.ExecuteStoredProcedure(FunctionalProfileConstants.USP_FunctionalProfile_PSY_INSERT, sqlparms, ExecutionType.Scalar);
                return (Convert.ToInt32(result) > 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool UpdateFunctionalProfile(FunctionalProfile functionalProfile)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = FunctionalProfileConstants.Id, Value = functionalProfile.Id });
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = FunctionalProfileConstants.RoleId, Value = functionalProfile.RoleId });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.ChangeControlInitiation, Value = functionalProfile.ChangeControlInitiation });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.CCHODReview, Value = functionalProfile.CCHODReview });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.CCQAReview, Value = functionalProfile.CCQAReview });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.CCCFTReview, Value = functionalProfile.CCCFTReview });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.CCCustomerNotification, Value = functionalProfile.CCCustomerNotification });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.CCQADecision, Value = functionalProfile.CCQADecision });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.CCActionPlan, Value = functionalProfile.CCActionPlan });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.CCFinalClosure, Value = functionalProfile.CCFinalClosure });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.CCExtensionOfTargetDate, Value = functionalProfile.CCExtensionOfTargetDate });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.CCWorkTransfer, Value = functionalProfile.CCWorkTransfer });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.CCDossierPrint, Value = functionalProfile.CCDossierPrint });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.CCAuditTrial, Value = functionalProfile.CCAuditTrial });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.CCReport, Value = functionalProfile.CCReport });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.DeviationInitiation, Value = functionalProfile.DeviationInitiation });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.DIHODReview, Value = functionalProfile.DIHODReview });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.DIQAReview, Value = functionalProfile.DIQAReview });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.DICFTReview, Value = functionalProfile.DICFTReview });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.DICustomerNotification, Value = functionalProfile.DICustomerNotification });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.QAManager, Value = functionalProfile.QAManager });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.Investigation, Value = functionalProfile.Investigation });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.DIQADecision, Value = functionalProfile.DIQADecision });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.DIActionPlan, Value = functionalProfile.DIActionPlan });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.DIFinalClosure, Value = functionalProfile.DIFinalClosure });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.DIExtensionOfTargetDate, Value = functionalProfile.DIExtensionOfTargetDate });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.DIWorkTransfer, Value = functionalProfile.DIWorkTransfer });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.DIDossierPrint, Value = functionalProfile.DIDossierPrint });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.DIAuditTrial, Value = functionalProfile.DIAuditTrial });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.DIReport, Value = functionalProfile.DIReport });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.CAPAInitiation, Value = functionalProfile.CAPAInitiation });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.CAPAHODReview, Value = functionalProfile.CAPAHODReview });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.CAPAQAReview, Value = functionalProfile.CAPAQAReview });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.CAPACFTReview, Value = functionalProfile.CAPACFTReview });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.CAPAQADecision, Value = functionalProfile.CAPAQADecision });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.CAPAActionPlan, Value = functionalProfile.CAPAActionPlan });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.CAPAFinalClosure, Value = functionalProfile.CAPAFinalClosure });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.CAPAExtensionOfTargetDate, Value = functionalProfile.CAPAExtensionOfTargetDate });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.CAPAWorkTransfer, Value = functionalProfile.CAPAWorkTransfer });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.CAPADossierPrint, Value = functionalProfile.CAPADossierPrint });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.CAPAAuditTrial, Value = functionalProfile.CAPAAuditTrial });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.CAPAReport, Value = functionalProfile.CAPAReport });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.SecuritySetting, Value = functionalProfile.SecuritySetting });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.NewRole, Value = functionalProfile.NewRole });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.SetFunctionalProfile, Value = functionalProfile.SetFunctionalProfile });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.NewUser, Value = functionalProfile.NewUser });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.NewUserApproval, Value = functionalProfile.NewUserApproval });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.PlantAssignment, Value = functionalProfile.PlantAssignment });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.ModifyPlantAssignment, Value = functionalProfile.ModifyPlantAssignment });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.UserGroup, Value = functionalProfile.UserGroup });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.ModifyUserGroup, Value = functionalProfile.ModifyUserGroup });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.UserAccountStatus, Value = functionalProfile.UserAccountStatus });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.Reset_LoginPassword, Value = functionalProfile.ResetLoginPassword });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.ModifyUser, Value = functionalProfile.ModifyUser });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.ProductOrMaterialRegistration, Value = functionalProfile.ProductOrMaterialRegistration });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.BatchOrLotParticulars, Value = functionalProfile.BatchOrLotParticulars });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.EquipmentRegistration, Value = functionalProfile.EquipmentRegistration });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.MarketRegistration, Value = functionalProfile.MarketRegistration });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.CustomerRegistration, Value = functionalProfile.CustomerRegistration });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = FunctionalProfileConstants.AuditTrial, Value = functionalProfile.AuditTrial });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = FunctionalProfileConstants.Remark, Value = functionalProfile.Remark });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = FunctionalProfileConstants.ModifiedBy, Value = functionalProfile.ModifiedBy });
                Object result = dataAccessHelper.ExecuteStoredProcedure(FunctionalProfileConstants.USP_FunctionalProfile_PSY_UPDATE, sqlparms, ExecutionType.Scalar);
                return (Convert.ToInt32(result) > 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteFunctionalProfileById(System.Int32? id)
        {
            try
            {
                var result = dataAccessHelper.ExecuteStoredProcedure(FunctionalProfileConstants.USP_FunctionalProfile_PSY_DELETE, FunctionalProfileConstants.Id, DbType.Int32, id, ExecutionType.NonQuery);
                return (Convert.ToInt32(result) >= 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteAllFunctionalProfile(List<int> ids)
        {
            try
            {
                var result = dataAccessHelper.ExecuteStoredProcedure(FunctionalProfileConstants.USP_FunctionalProfile_PSY_DELETE_ALL, FunctionalProfileConstants.Id, DbType.String, string.Join(',',  ids), ExecutionType.NonQuery);
                return (Convert.ToInt32(result) >= 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public DataSet GetFunctionalProfileByRoleId(System.Int32? id)
        {
            try
            {
                DataSet dataset = (DataSet)dataAccessHelper.ExecuteStoredProcedure(FunctionalProfileConstants.USP_FunctionalProfile_PSY_By_Id_GET, "@Id", DbType.Int32, id, ExecutionType.Dataset);
                return dataset;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteFunctionalProfileByRoleId(System.Int32? id)
        {
            try
            {
                var result = dataAccessHelper.ExecuteStoredProcedure(FunctionalProfileConstants.USP_FunctionalProfile_PSY_By_Id_DELETE, "@Id", DbType.Int32, id, ExecutionType.NonQuery);
                return (Convert.ToInt32(result) >= 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
    }
}
