//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QAMS.Controllers
{
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Authorization;
    using QAMS.Common.Entities;
    using QAMS.Admin.Entities;
    using QAMS.Admin.Services;
    
    
    /// <summary>
    /// Comment
    /// </summary>
    [ApiController()]
    [Route("api/functionalprofile")]
    public class FunctionalProfileController : ControllerBase
    {
        
        private readonly IFunctionalProfileService functionalProfileService;
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="functionalProfileService"></param>
        public FunctionalProfileController(IFunctionalProfileService functionalProfileService)
        {
            this.functionalProfileService = functionalProfileService;
        }
        
        /// <summary>
        /// This method is used to Get List of FunctionalProfile
        /// </summary>
        /// <param name="requestContext"></param>
        [HttpPost()]
        public ActionResult<ResponseContext<FunctionalProfile>> GetAllFunctionalProfile(RequestContext requestContext)
        {
            var result = functionalProfileService.GetAllFunctionalProfile(requestContext);
            return result;
        }
        
        /// <summary>
        /// This method is used to Get FunctionalProfile By Id id
        /// </summary>
        /// <param name="id"></param>
        [HttpGet("{id}")]
        public ActionResult<FunctionalProfile> GetFunctionalProfileById(System.Int32? id)
        {
            var result = functionalProfileService.GetFunctionalProfileById(id);
            return result;
        }
        
        /// <summary>
        /// This Method is used to Save FunctionalProfile
        /// </summary>
        /// <param name="functionalProfile"></param>
        [HttpPost("savefunctionalprofile")]
        public ActionResult<System.Boolean> SaveFunctionalProfile(FunctionalProfile functionalProfile)
        {
            var result = functionalProfileService.SaveFunctionalProfile(functionalProfile);
            return result;
        }
        
        /// <summary>
        /// This Method is used to update FunctionalProfile
        /// </summary>
        /// <param name="functionalProfile"></param>
        [HttpPost("updatefunctionalprofile")]
        public ActionResult<System.Boolean> UpdateFunctionalProfile(FunctionalProfile functionalProfile)
        {
            var result = functionalProfileService.UpdateFunctionalProfile(functionalProfile);
            return result;
        }
        
        /// <summary>
        /// This Method is used to Delete FunctionalProfile By Id id
        /// </summary>
        /// <param name="id"></param>
        [HttpDelete("{id}")]
        public ActionResult<bool> DeleteFunctionalProfileById(System.Int32? id)
        {
            var result = functionalProfileService.DeleteFunctionalProfileById(id);
            return result;
        }
        
        /// <summary>
        /// This Method is used to Delete FunctionalProfile By Multiple ids ids
        /// </summary>
        /// <param name="ids"></param>
        [HttpDelete("deleteAll")]
        public ActionResult<bool> DeleteAllFunctionalProfile(List<int> ids)
        {
            var result = functionalProfileService.DeleteAllFunctionalProfile(ids);
            return result;
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="id"></param>
        [HttpGet("getFunctionalProfileByRoleId/{id}")]
        public ActionResult<List<FunctionalProfile>> GetFunctionalProfileByRoleId(System.Int32? id)
        {
            var result = functionalProfileService.GetFunctionalProfileByRoleId(id);
            return result;
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="id"></param>
        [HttpDelete("deleteFunctionalProfileByRoleId/{id}")]
        public ActionResult<bool> DeleteFunctionalProfileByRoleId(System.Int32? id)
        {
            var result = functionalProfileService.DeleteFunctionalProfileByRoleId(id);
            return result;
        }
    }
}
