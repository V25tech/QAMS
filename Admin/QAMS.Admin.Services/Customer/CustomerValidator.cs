//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QAMS.Admin.Services
{
    using System;
    using System.Text;
    using System.IO;
    using System.Linq;
    using System.Data;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using QAMS.Admin.Entities;
    using VAMLIbrary.Core.Validators;
    
    
    // Comment
    public static class CustomerValidator
    {
        
        public static string IsValidCustomer(CustomerRegistration customer)
        {
            try
            {
                StringBuilder validationMessages = new StringBuilder();
                ValidationHelper validationHelper = new ValidationHelper();
                validationMessages.Append(validationHelper.NullCheckValidator(customer.name, nameof(customer.name)));
                validationMessages.Append(validationHelper.LengthCheckValidator(customer.name,150, nameof(customer.name)));
                validationMessages.Append(validationHelper.NullCheckValidator(customer.uniqueCode, nameof(customer.uniqueCode)));
                validationMessages.Append(validationHelper.LengthCheckValidator(customer.uniqueCode, 150, nameof(customer.uniqueCode)));
                validationMessages.Append(validationHelper.LengthCheckValidator(customer.contactName,150, nameof(customer.contactName)));
                validationMessages.Append(validationHelper.LengthCheckValidator(customer.address,250, nameof(customer.address)));
                validationMessages.Append(validationHelper.LengthCheckValidator(customer.city,150, nameof(customer.city)));
                validationMessages.Append(validationHelper.LengthCheckValidator(customer.state,150, nameof(customer.state)));
                validationMessages.Append(validationHelper.LengthCheckValidator(customer.country,150, nameof(customer.country)));
                validationMessages.Append(validationHelper.LengthCheckValidator(customer.email,150, nameof(customer.email)));
                validationMessages.Append(validationHelper.LengthCheckValidator(customer.remark,150, nameof(customer.remark)));
                validationMessages.Append(validationHelper.NullCheckValidator(customer.createdBy, nameof(customer.createdBy)));
                validationMessages.Append(validationHelper.LengthCheckValidator(customer.createdBy,150, nameof(customer.createdBy)));
                validationMessages.Append(validationHelper.NullCheckValidator(customer.ModifiedBy, nameof(customer.ModifiedBy)));
                validationMessages.Append(validationHelper.LengthCheckValidator(customer.ModifiedBy,150, nameof(customer.ModifiedBy)));
                if (!String.IsNullOrEmpty(validationMessages.ToString()))
                {
                    return Convert.ToString(validationMessages.Remove(validationMessages.ToString().LastIndexOf(','),1));
                }
                else
                {
                    return Convert.ToString(validationMessages);
                }
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
    }
}
