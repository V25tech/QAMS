//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QAMS.Admin.Services
{
    using System;
    using System.Text;
    using System.IO;
    using System.Linq;
    using System.Data;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using QAMS.Admin.Entities;
    using VAMLIbrary.Core.Validators;
    
    
    // Comment
    public static class EquipmentValidator
    {
        
        public static string IsValidEquipment(Equipment equipment)
        {
            try
            {
                StringBuilder validationMessages = new StringBuilder();
                ValidationHelper validationHelper = new ValidationHelper();
                validationMessages.Append(validationHelper.NullCheckValidator(equipment.equipmentName, nameof(equipment.equipmentName)));
                validationMessages.Append(validationHelper.LengthCheckValidator(equipment.equipmentName, 150, nameof(equipment.equipmentName)));
                validationMessages.Append(validationHelper.NullCheckValidator(equipment.EquipmentId, nameof(equipment.EquipmentId)));
                validationMessages.Append(validationHelper.LengthCheckValidator(equipment.EquipmentId,150, nameof(equipment.EquipmentId)));
                validationMessages.Append(validationHelper.NullCheckValidator(equipment.Make, nameof(equipment.Make)));
                validationMessages.Append(validationHelper.LengthCheckValidator(equipment.Make,150, nameof(equipment.Make)));
                validationMessages.Append(validationHelper.NullCheckValidator(equipment.Model, nameof(equipment.Model)));
                validationMessages.Append(validationHelper.LengthCheckValidator(equipment.Model,150, nameof(equipment.Model)));
                validationMessages.Append(validationHelper.NullCheckValidator(equipment.SerialNumber, nameof(equipment.SerialNumber)));
                validationMessages.Append(validationHelper.LengthCheckValidator(equipment.SerialNumber,150, nameof(equipment.SerialNumber)));
                validationMessages.Append(validationHelper.LengthCheckValidator(equipment.InstalledLocation,150, nameof(equipment.InstalledLocation)));
                validationMessages.Append(validationHelper.NullCheckValidator(equipment.SuppliedBy, nameof(equipment.SuppliedBy)));
                validationMessages.Append(validationHelper.LengthCheckValidator(equipment.SuppliedBy,150, nameof(equipment.SuppliedBy)));
                validationMessages.Append(validationHelper.LengthCheckValidator(equipment.Software,150, nameof(equipment.Software)));
                validationMessages.Append(validationHelper.NullCheckValidator(equipment.CreatedBy, nameof(equipment.CreatedBy)));
                validationMessages.Append(validationHelper.LengthCheckValidator(equipment.CreatedBy,150, nameof(equipment.CreatedBy)));
                validationMessages.Append(validationHelper.NullCheckValidator(equipment.ModifiedBy, nameof(equipment.ModifiedBy)));
                validationMessages.Append(validationHelper.LengthCheckValidator(equipment.ModifiedBy,150, nameof(equipment.ModifiedBy)));
                if (!String.IsNullOrEmpty(validationMessages.ToString()))
                {
                    return Convert.ToString(validationMessages.Remove(validationMessages.ToString().LastIndexOf(','),1));
                }
                else
                {
                    return Convert.ToString(validationMessages);
                }
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
    }
}
