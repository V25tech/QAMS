//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QAMS.Admin.Services
{
    using System;
    using System.Text;
    using System.IO;
    using System.Linq;
    using System.Data;
    using System.Collections.Generic;
    using QAMS.Common.Entities;
    using QAMS.Admin.Entities;
    using QAMS.Admin.Data;
    
    
    // Comment
    public class EquipmentService : IEquipmentService
    {
        
        private readonly IEquipmentData equipmentData;
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="equipmentData"></param>
        public EquipmentService(IEquipmentData equipmentData)
        {
            this.equipmentData = equipmentData;
        }
        
        public ResponseContext<Equipment> GetAllEquipment(RequestContext requestContext)
        {
            try
            {
                DataSet dataset = equipmentData.GetAllEquipment(requestContext);
                List<Equipment> result = EquipmentConverter.SetAllEquipment(dataset);
                return new ResponseContext<Equipment>() { RowCount = CommonConverter.SetRowsCount(dataset), Response = result };
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public Equipment GetEquipmentById(System.Int32? id)
        {
            try
            {
                DataSet dataset = equipmentData.GetEquipmentById(id);
                Equipment result = EquipmentConverter.SetEquipment(dataset);
                return result;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool SaveEquipment(Equipment equipment)
        {
            try
            {
               
                equipment.CreatedBy = "Admin";
                equipment.ModifiedBy = "Admin";
                String validationMessages = EquipmentValidator.IsValidEquipment(equipment);
                if (validationMessages.Length <= 0)
                {
                    var result = equipmentData.SaveEquipment(equipment);
                    return result;
                }
                throw new System.Exception(validationMessages);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool UpdateEquipment(Equipment equipment)
        {
            try
            {
                String validationMessages = EquipmentValidator.IsValidEquipment(equipment);
                if (validationMessages.Length <= 0)
                {
                    bool result = equipmentData.UpdateEquipment(equipment);
                    return result;
                }
                throw new System.Exception(validationMessages);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteEquipmentById(System.Int32? id)
        {
            try
            {
                return equipmentData.DeleteEquipmentById(id);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteAllEquipment(List<int> ids)
        {
            try
            {
                return equipmentData.DeleteAllEquipment(ids);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public List<Equipment> GetEquipmentByDepartmentId(System.Int32? id)
        {
            try
            {
                DataSet dataset = equipmentData.GetEquipmentByDepartmentId(id);
                List<Equipment> result = EquipmentConverter.SetAllEquipment(dataset);
                return result;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteEquipmentByDepartmentId(System.Int32? id)
        {
            try
            {
                return equipmentData.DeleteEquipmentByDepartmentId(id);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
    }
}
