//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QAMS.Admin.Services
{
    using System;
    using System.Text;
    using System.IO;
    using System.Linq;
    using System.Data;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using QAMS.Admin.Entities;
    using VAMLIbrary.Core.Extentions;
    using QAMS.Common.Entities;
    
    
    // Comment
    public static class QualityEventConverter
    {
        
        public static List<QualityEvent> SetAllQualityEvent(DataSet dataset)
        {
            try
            {
                List<QualityEvent> result = new List<QualityEvent>();
                QualityEvent qualityEventData;
                if (dataset != null && dataset.Tables.Count > 0 && dataset.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; (i < dataset.Tables[0].Rows.Count); i = (i + 1))
                    {
                        DataRow row = dataset.Tables[0].Rows[i];
                        qualityEventData = new QualityEvent();
                        qualityEventData.Id = DatatypeConverter.SetIntValue(row[QualityEventConstants.Id.TrimAt()]);
                        qualityEventData.Name = Convert.ToString(row[QualityEventConstants.Name.TrimAt()]);
                        qualityEventData.Code = Convert.ToString(row[QualityEventConstants.Code.TrimAt()]);
                        qualityEventData.CreatedBy = Convert.ToString(row[QualityEventConstants.CreatedBy.TrimAt()]);
                        qualityEventData.CreatedDate = DatatypeConverter.SetDateTime(row[QualityEventConstants.CreatedDate.TrimAt()]);
                        qualityEventData.ModifiedBy = Convert.ToString(row[QualityEventConstants.ModifiedBy.TrimAt()]);
                        qualityEventData.ModifiedDate = DatatypeConverter.SetDateTime(row[QualityEventConstants.ModifiedDate.TrimAt()]);
                        result.Add(qualityEventData);
                    }
                }
                return result;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public static QualityEvent SetQualityEvent(DataSet dataset)
        {
            var result = SetAllQualityEvent(dataset);
            if (result.Count > 0)
            {
                return result.FirstOrDefault();
            }
            return null;
        }
    }
}
