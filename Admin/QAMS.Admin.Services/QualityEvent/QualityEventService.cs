//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QAMS.Admin.Services
{
    using System;
    using System.Text;
    using System.IO;
    using System.Linq;
    using System.Data;
    using System.Collections.Generic;
    using QAMS.Common.Entities;
    using QAMS.Admin.Entities;
    using QAMS.Admin.Data;
    
    
    // Comment
    public class QualityEventService : IQualityEventService
    {
        
        private readonly IQualityEventData qualityEventData;
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="qualityEventData"></param>
        public QualityEventService(IQualityEventData qualityEventData)
        {
            this.qualityEventData = qualityEventData;
        }
        
        public ResponseContext<QualityEvent> GetAllQualityEvent(RequestContext requestContext)
        {
            try
            {
                DataSet dataset = qualityEventData.GetAllQualityEvent(requestContext);
                List<QualityEvent> result = QualityEventConverter.SetAllQualityEvent(dataset);
                return new ResponseContext<QualityEvent>() { RowCount = CommonConverter.SetRowsCount(dataset), Response = result };
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public QualityEvent GetQualityEventById(System.Int32? id)
        {
            try
            {
                DataSet dataset = qualityEventData.GetQualityEventById(id);
                QualityEvent result = QualityEventConverter.SetQualityEvent(dataset);
                return result;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool SaveQualityEvent(QualityEvent qualityEvent)
        {
            try
            {
                String validationMessages = QualityEventValidator.IsValidQualityEvent(qualityEvent);
                if (validationMessages.Length <= 0)
                {
                    var result = qualityEventData.SaveQualityEvent(qualityEvent);
                    return result;
                }
                throw new System.Exception(validationMessages);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool UpdateQualityEvent(QualityEvent qualityEvent)
        {
            try
            {
                String validationMessages = QualityEventValidator.IsValidQualityEvent(qualityEvent);
                if (validationMessages.Length <= 0)
                {
                    bool result = qualityEventData.UpdateQualityEvent(qualityEvent);
                    return result;
                }
                throw new System.Exception(validationMessages);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteQualityEventById(System.Int32? id)
        {
            try
            {
                return qualityEventData.DeleteQualityEventById(id);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteAllQualityEvent(List<int> ids)
        {
            try
            {
                return qualityEventData.DeleteAllQualityEvent(ids);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
    }
}
