//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QAMS.Admin.Services
{
    using System;
    using System.Text;
    using System.IO;
    using System.Linq;
    using System.Data;
    using System.Collections.Generic;
    using QAMS.Common.Entities;
    using QAMS.Admin.Entities;
    using QAMS.Admin.Data;
    
    
    // Comment
    public class SecuritySettingService : ISecuritySettingService
    {
        
        private readonly ISecuritySettingData securitySettingData;
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="securitySettingData"></param>
        public SecuritySettingService(ISecuritySettingData securitySettingData)
        {
            this.securitySettingData = securitySettingData;
        }
        
        public ResponseContext<SecuritySetting> GetAllSecuritySetting(RequestContext requestContext)
        {
            try
            {
                DataSet dataset = securitySettingData.GetAllSecuritySetting(requestContext);
                List<SecuritySetting> result = SecuritySettingConverter.SetAllSecuritySetting(dataset);
                return new ResponseContext<SecuritySetting>() { RowCount = CommonConverter.SetRowsCount(dataset), Response = result };
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public SecuritySetting GetSecuritySettingById(System.Int32? id)
        {
            try
            {
                DataSet dataset = securitySettingData.GetSecuritySettingById(id);
                SecuritySetting result = SecuritySettingConverter.SetSecuritySetting(dataset);
                return result;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool SaveSecuritySetting(SecuritySetting securitySetting)
        {
            try
            {
                String validationMessages = SecuritySettingValidator.IsValidSecuritySetting(securitySetting);
                if (validationMessages.Length <= 0)
                {
                    var result = securitySettingData.SaveSecuritySetting(securitySetting);
                    return result;
                }
                throw new System.Exception(validationMessages);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool UpdateSecuritySetting(SecuritySetting securitySetting)
        {
            try
            {
                String validationMessages = SecuritySettingValidator.IsValidSecuritySetting(securitySetting);
                if (validationMessages.Length <= 0)
                {
                    bool result = securitySettingData.UpdateSecuritySetting(securitySetting);
                    return result;
                }
                throw new System.Exception(validationMessages);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteSecuritySettingById(System.Int32? id)
        {
            try
            {
                return securitySettingData.DeleteSecuritySettingById(id);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteAllSecuritySetting(List<int> ids)
        {
            try
            {
                return securitySettingData.DeleteAllSecuritySetting(ids);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
    }
}
