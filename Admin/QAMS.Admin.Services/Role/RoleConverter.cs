//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QAMS.Admin.Services
{
    using System;
    using System.Text;
    using System.IO;
    using System.Linq;
    using System.Data;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using QAMS.Admin.Entities;
    using VAMLIbrary.Core.Extentions;
    using QAMS.Common.Entities;


    // Comment
    public static class RoleConverter
    {

        public static List<Role> SetAllRole(DataSet dataset)
        {
            try
            {
                List<Role> result = new List<Role>();
                Role roleData;
                if (dataset != null && dataset.Tables.Count > 0 && dataset.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; (i < dataset.Tables[0].Rows.Count); i = (i + 1))
                    {
                        DataRow row = dataset.Tables[0].Rows[i];
                        roleData = new Role();
                        roleData.Id = DatatypeConverter.SetIntValue(row[RoleConstants.Id.TrimAt()]);
                        roleData.Name = Convert.ToString(row[RoleConstants.Name.TrimAt()]);
                        roleData.Description = Convert.ToString(row[RoleConstants.Description.TrimAt()]);
                        roleData.CreatedBy = Convert.ToString(row[RoleConstants.CreatedBy.TrimAt()]);
                        roleData.CreatedDate = DatatypeConverter.SetDateTime(row[RoleConstants.CreatedDate.TrimAt()]);
                        roleData.ModifiedBy = Convert.ToString(row[RoleConstants.ModifiedBy.TrimAt()]);
                        roleData.ModifiedDate = DatatypeConverter.SetDateTime(row[RoleConstants.ModifiedDate.TrimAt()]);
                        if (row["DOCUMENT"] != null && row["DOCUMENT"] != "")
                        {
                          //  roleData = JsonConvert.DeserializeObject<Role>(Convert.ToString(row["DOCUMENT"]));
                        }
                        result.Add(roleData);
                    }
                }
                return result;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }

        public static Role SetRole(DataSet dataset)
        {
            var result = SetAllRole(dataset);
            if (result.Count > 0)
            {
                return result.FirstOrDefault();
            }
            return null;
        }
    }
}
