//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QAMS.Admin.Services
{
    using System;
    using System.Text;
    using System.IO;
    using System.Linq;
    using System.Data;
    using System.Collections.Generic;
    using QAMS.Common.Entities;
    using QAMS.Admin.Entities;
    using QAMS.Admin.Data;
    using QAMS.WEB.Entities;


    // Comment
    public class BatchDetailsService : IBatchDetailsService
    {
        
        private readonly IBatchDetailsData batchDetailsData;
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="batchDetailsData"></param>
        public BatchDetailsService(IBatchDetailsData batchDetailsData)
        {
            this.batchDetailsData = batchDetailsData;
        }
        
        public ResponseContext<BatchDetails> GetAllBatchDetails()
        {
            try
            {
                DataSet dataset = batchDetailsData.GetAllBatchDetails();
                List<BatchDetails> result = BatchDetailsConverter.SetAllBatchDetails(dataset);
                return new ResponseContext<BatchDetails>() { RowCount = CommonConverter.SetRowsCount(dataset), Response = result };
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public BatchDetails GetBatchDetailsById(System.Int32? id)
        {
            try
            {
                DataSet dataset = batchDetailsData.GetBatchDetailsById(id);
                BatchDetails result = BatchDetailsConverter.SetBatchDetails(dataset);
                return result;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool SaveBatchDetails(BatchDetails batchDetails)
        {
            try
            {
                String validationMessages = BatchDetailsValidator.IsValidBatchDetails(batchDetails);
                if (validationMessages.Length <= 0)
                {
                    var result = batchDetailsData.SaveBatchDetails(batchDetails);
                    return result;
                }
                throw new System.Exception(validationMessages);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool UpdateBatchDetails(BatchDetails batchDetails)
        {
            try
            {
                String validationMessages = BatchDetailsValidator.IsValidBatchDetails(batchDetails);
                if (validationMessages.Length <= 0)
                {
                    bool result = batchDetailsData.UpdateBatchDetails(batchDetails);
                    return result;
                }
                throw new System.Exception(validationMessages);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteBatchDetailsById(System.Int32? id)
        {
            try
            {
                return batchDetailsData.DeleteBatchDetailsById(id);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteAllBatchDetails(List<int> ids)
        {
            try
            {
                return batchDetailsData.DeleteAllBatchDetails(ids);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
    }
}
