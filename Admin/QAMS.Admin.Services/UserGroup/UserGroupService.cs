//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QAMS.Admin.Services
{
    using System;
    using System.Text;
    using System.IO;
    using System.Linq;
    using System.Data;
    using System.Collections.Generic;
    using QAMS.Common.Entities;
    using QAMS.Admin.Entities;
    using QAMS.Admin.Data;
    using Newtonsoft.Json;


    // Comment
    public class UserGroupService : IUserGroupService
    {
        
        private readonly IUserGroupData userGroupData;
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="userGroupData"></param>
        public UserGroupService(IUserGroupData userGroupData)
        {
            this.userGroupData = userGroupData;
        }
        
        public ResponseContext<UserGroup> GetAllUserGroup(RequestContext requestContext)
        {
            try
            {
                DataSet dataset = userGroupData.GetAllUserGroup(requestContext);
                List<UserGroup> result = UserGroupConverter.SetAllUserGroup(dataset);
                return new ResponseContext<UserGroup>() { RowCount = CommonConverter.SetRowsCount(dataset), Response = result };
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public UserGroup GetUserGroupById(System.Int32? id)
        {
            try
            {
                DataSet dataset = userGroupData.GetUserGroupById(id);
                UserGroup result = UserGroupConverter.SetUserGroup(dataset);

                return result;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool SaveUserGroup(UserGroup userGroup)
        {
            try
            {
                userGroup.createdBy = "admin";
                userGroup.modifiedBy= "admin";
                userGroup.roles = "Admin";
                userGroup.userMetdata = userGroup.selectedUsers;//GetSelectedUsers(userGroup.selectedUsers);               
                String validationMessages = UserGroupValidator.IsValidUserGroup(userGroup);
                if (validationMessages.Length <= 0)
                {
                    var result = userGroupData.SaveUserGroup(userGroup);
                    return result;
                }
                throw new System.Exception(validationMessages);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }

        private string GetSelectedUsers(List<User> selectedUsers)
        {
            try
            {
                string jsonValue = string.Empty;
                List<UserMapping> usermap = new List<UserMapping>();
                UserMapping umap = new UserMapping();
                foreach (User user in selectedUsers)
                {
                    umap.id = user.Id;
                    umap.name = user.userName;
                    usermap.Add(umap);
                }
                jsonValue = JsonConvert.SerializeObject(usermap, Formatting.Indented);
                return jsonValue;
            }
            catch
            {
                throw;
            }

        }

        public bool UpdateUserGroup(UserGroup userGroup)
        {
            try
            {
                String validationMessages = UserGroupValidator.IsValidUserGroup(userGroup);
                if (validationMessages.Length <= 0)
                {
                    bool result = userGroupData.UpdateUserGroup(userGroup);
                    return result;
                }
                throw new System.Exception(validationMessages);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteUserGroupById(System.Int32? id)
        {
            try
            {
                return userGroupData.DeleteUserGroupById(id);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteAllUserGroup(List<int> ids)
        {
            try
            {
                return userGroupData.DeleteAllUserGroup(ids);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
    }
}
