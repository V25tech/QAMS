//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QAMS.Admin.Services
{
    using System;
    using System.Text;
    using System.IO;
    using System.Linq;
    using System.Data;
    using System.Collections.Generic;
    using QAMS.Common.Entities;
    using QAMS.Admin.Entities;
    using QAMS.Admin.Data;
    
    
    // Comment
    public class FunctionalProfileService : IFunctionalProfileService
    {
        
        private readonly IFunctionalProfileData functionalProfileData;
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="functionalProfileData"></param>
        public FunctionalProfileService(IFunctionalProfileData functionalProfileData)
        {
            this.functionalProfileData = functionalProfileData;
        }
        
        public ResponseContext<FunctionalProfile> GetAllFunctionalProfile(RequestContext requestContext)
        {
            try
            {
                DataSet dataset = functionalProfileData.GetAllFunctionalProfile(requestContext);
                List<FunctionalProfile> result = FunctionalProfileConverter.SetAllFunctionalProfile(dataset);
                return new ResponseContext<FunctionalProfile>() { RowCount = CommonConverter.SetRowsCount(dataset), Response = result };
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public FunctionalProfile GetFunctionalProfileById(System.Int32? id)
        {
            try
            {
                DataSet dataset = functionalProfileData.GetFunctionalProfileById(id);
                FunctionalProfile result = FunctionalProfileConverter.SetFunctionalProfile(dataset);
                return result;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool SaveFunctionalProfile(FunctionalProfile functionalProfile)
        {
            try
            {
                String validationMessages = FunctionalProfileValidator.IsValidFunctionalProfile(functionalProfile);
                if (validationMessages.Length <= 0)
                {
                    var result = functionalProfileData.SaveFunctionalProfile(functionalProfile);
                    return result;
                }
                throw new System.Exception(validationMessages);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool UpdateFunctionalProfile(FunctionalProfile functionalProfile)
        {
            try
            {
                String validationMessages = FunctionalProfileValidator.IsValidFunctionalProfile(functionalProfile);
                if (validationMessages.Length <= 0)
                {
                    bool result = functionalProfileData.UpdateFunctionalProfile(functionalProfile);
                    return result;
                }
                throw new System.Exception(validationMessages);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteFunctionalProfileById(System.Int32? id)
        {
            try
            {
                return functionalProfileData.DeleteFunctionalProfileById(id);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteAllFunctionalProfile(List<int> ids)
        {
            try
            {
                return functionalProfileData.DeleteAllFunctionalProfile(ids);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public List<FunctionalProfile> GetFunctionalProfileByRoleId(System.Int32? id)
        {
            try
            {
                DataSet dataset = functionalProfileData.GetFunctionalProfileByRoleId(id);
                List<FunctionalProfile> result = FunctionalProfileConverter.SetAllFunctionalProfile(dataset);
                return result;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteFunctionalProfileByRoleId(System.Int32? id)
        {
            try
            {
                return functionalProfileData.DeleteFunctionalProfileByRoleId(id);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
    }
}
