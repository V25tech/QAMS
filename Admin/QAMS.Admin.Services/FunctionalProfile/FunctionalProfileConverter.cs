//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QAMS.Admin.Services
{
    using System;
    using System.Text;
    using System.IO;
    using System.Linq;
    using System.Data;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using QAMS.Admin.Entities;
    using VAMLIbrary.Core.Extentions;
    using QAMS.Common.Entities;
    
    
    // Comment
    public static class FunctionalProfileConverter
    {
        
        public static List<FunctionalProfile> SetAllFunctionalProfile(DataSet dataset)
        {
            try
            {
                List<FunctionalProfile> result = new List<FunctionalProfile>();
                FunctionalProfile functionalProfileData;
                if (dataset != null && dataset.Tables.Count > 0 && dataset.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; (i < dataset.Tables[0].Rows.Count); i = (i + 1))
                    {
                        DataRow row = dataset.Tables[0].Rows[i];
                        functionalProfileData = new FunctionalProfile();
                        functionalProfileData.Id = DatatypeConverter.SetIntValue(row[FunctionalProfileConstants.Id.TrimAt()]);
                        functionalProfileData.RoleId = DatatypeConverter.SetIntValue(row[FunctionalProfileConstants.RoleId.TrimAt()]);
                        functionalProfileData.ChangeControlInitiation = DatatypeConverter.SetBoolValue(row[FunctionalProfileConstants.ChangeControlInitiation.TrimAt()]);
                        functionalProfileData.CCHODReview = DatatypeConverter.SetBoolValue(row[FunctionalProfileConstants.CCHODReview.TrimAt()]);
                        functionalProfileData.CCQAReview = DatatypeConverter.SetBoolValue(row[FunctionalProfileConstants.CCQAReview.TrimAt()]);
                        functionalProfileData.CCCFTReview = DatatypeConverter.SetBoolValue(row[FunctionalProfileConstants.CCCFTReview.TrimAt()]);
                        functionalProfileData.CCCustomerNotification = DatatypeConverter.SetBoolValue(row[FunctionalProfileConstants.CCCustomerNotification.TrimAt()]);
                        functionalProfileData.CCQADecision = DatatypeConverter.SetBoolValue(row[FunctionalProfileConstants.CCQADecision.TrimAt()]);
                        functionalProfileData.CCActionPlan = DatatypeConverter.SetBoolValue(row[FunctionalProfileConstants.CCActionPlan.TrimAt()]);
                        functionalProfileData.CCFinalClosure = DatatypeConverter.SetBoolValue(row[FunctionalProfileConstants.CCFinalClosure.TrimAt()]);
                        functionalProfileData.CCExtensionOfTargetDate = DatatypeConverter.SetBoolValue(row[FunctionalProfileConstants.CCExtensionOfTargetDate.TrimAt()]);
                        functionalProfileData.CCWorkTransfer = DatatypeConverter.SetBoolValue(row[FunctionalProfileConstants.CCWorkTransfer.TrimAt()]);
                        functionalProfileData.CCDossierPrint = DatatypeConverter.SetBoolValue(row[FunctionalProfileConstants.CCDossierPrint.TrimAt()]);
                        functionalProfileData.CCAuditTrial = DatatypeConverter.SetBoolValue(row[FunctionalProfileConstants.CCAuditTrial.TrimAt()]);
                        functionalProfileData.CCReport = DatatypeConverter.SetBoolValue(row[FunctionalProfileConstants.CCReport.TrimAt()]);
                        functionalProfileData.DeviationInitiation = DatatypeConverter.SetBoolValue(row[FunctionalProfileConstants.DeviationInitiation.TrimAt()]);
                        functionalProfileData.DIHODReview = DatatypeConverter.SetBoolValue(row[FunctionalProfileConstants.DIHODReview.TrimAt()]);
                        functionalProfileData.DIQAReview = DatatypeConverter.SetBoolValue(row[FunctionalProfileConstants.DIQAReview.TrimAt()]);
                        functionalProfileData.DICFTReview = DatatypeConverter.SetBoolValue(row[FunctionalProfileConstants.DICFTReview.TrimAt()]);
                        functionalProfileData.DICustomerNotification = DatatypeConverter.SetBoolValue(row[FunctionalProfileConstants.DICustomerNotification.TrimAt()]);
                        functionalProfileData.QAManager = DatatypeConverter.SetBoolValue(row[FunctionalProfileConstants.QAManager.TrimAt()]);
                        functionalProfileData.Investigation = DatatypeConverter.SetBoolValue(row[FunctionalProfileConstants.Investigation.TrimAt()]);
                        functionalProfileData.DIQADecision = DatatypeConverter.SetBoolValue(row[FunctionalProfileConstants.DIQADecision.TrimAt()]);
                        functionalProfileData.DIActionPlan = DatatypeConverter.SetBoolValue(row[FunctionalProfileConstants.DIActionPlan.TrimAt()]);
                        functionalProfileData.DIFinalClosure = DatatypeConverter.SetBoolValue(row[FunctionalProfileConstants.DIFinalClosure.TrimAt()]);
                        functionalProfileData.DIExtensionOfTargetDate = DatatypeConverter.SetBoolValue(row[FunctionalProfileConstants.DIExtensionOfTargetDate.TrimAt()]);
                        functionalProfileData.DIWorkTransfer = DatatypeConverter.SetBoolValue(row[FunctionalProfileConstants.DIWorkTransfer.TrimAt()]);
                        functionalProfileData.DIDossierPrint = DatatypeConverter.SetBoolValue(row[FunctionalProfileConstants.DIDossierPrint.TrimAt()]);
                        functionalProfileData.DIAuditTrial = DatatypeConverter.SetBoolValue(row[FunctionalProfileConstants.DIAuditTrial.TrimAt()]);
                        functionalProfileData.DIReport = DatatypeConverter.SetBoolValue(row[FunctionalProfileConstants.DIReport.TrimAt()]);
                        functionalProfileData.CAPAInitiation = DatatypeConverter.SetBoolValue(row[FunctionalProfileConstants.CAPAInitiation.TrimAt()]);
                        functionalProfileData.CAPAHODReview = DatatypeConverter.SetBoolValue(row[FunctionalProfileConstants.CAPAHODReview.TrimAt()]);
                        functionalProfileData.CAPAQAReview = DatatypeConverter.SetBoolValue(row[FunctionalProfileConstants.CAPAQAReview.TrimAt()]);
                        functionalProfileData.CAPACFTReview = DatatypeConverter.SetBoolValue(row[FunctionalProfileConstants.CAPACFTReview.TrimAt()]);
                        functionalProfileData.CAPAQADecision = DatatypeConverter.SetBoolValue(row[FunctionalProfileConstants.CAPAQADecision.TrimAt()]);
                        functionalProfileData.CAPAActionPlan = DatatypeConverter.SetBoolValue(row[FunctionalProfileConstants.CAPAActionPlan.TrimAt()]);
                        functionalProfileData.CAPAFinalClosure = DatatypeConverter.SetBoolValue(row[FunctionalProfileConstants.CAPAFinalClosure.TrimAt()]);
                        functionalProfileData.CAPAExtensionOfTargetDate = DatatypeConverter.SetBoolValue(row[FunctionalProfileConstants.CAPAExtensionOfTargetDate.TrimAt()]);
                        functionalProfileData.CAPAWorkTransfer = DatatypeConverter.SetBoolValue(row[FunctionalProfileConstants.CAPAWorkTransfer.TrimAt()]);
                        functionalProfileData.CAPADossierPrint = DatatypeConverter.SetBoolValue(row[FunctionalProfileConstants.CAPADossierPrint.TrimAt()]);
                        functionalProfileData.CAPAAuditTrial = DatatypeConverter.SetBoolValue(row[FunctionalProfileConstants.CAPAAuditTrial.TrimAt()]);
                        functionalProfileData.CAPAReport = DatatypeConverter.SetBoolValue(row[FunctionalProfileConstants.CAPAReport.TrimAt()]);
                        functionalProfileData.SecuritySetting = DatatypeConverter.SetBoolValue(row[FunctionalProfileConstants.SecuritySetting.TrimAt()]);
                        functionalProfileData.NewRole = DatatypeConverter.SetBoolValue(row[FunctionalProfileConstants.NewRole.TrimAt()]);
                        functionalProfileData.SetFunctionalProfile = DatatypeConverter.SetBoolValue(row[FunctionalProfileConstants.SetFunctionalProfile.TrimAt()]);
                        functionalProfileData.NewUser = DatatypeConverter.SetBoolValue(row[FunctionalProfileConstants.NewUser.TrimAt()]);
                        functionalProfileData.NewUserApproval = DatatypeConverter.SetBoolValue(row[FunctionalProfileConstants.NewUserApproval.TrimAt()]);
                        functionalProfileData.PlantAssignment = DatatypeConverter.SetBoolValue(row[FunctionalProfileConstants.PlantAssignment.TrimAt()]);
                        functionalProfileData.ModifyPlantAssignment = DatatypeConverter.SetBoolValue(row[FunctionalProfileConstants.ModifyPlantAssignment.TrimAt()]);
                        functionalProfileData.UserGroup = DatatypeConverter.SetBoolValue(row[FunctionalProfileConstants.UserGroup.TrimAt()]);
                        functionalProfileData.ModifyUserGroup = DatatypeConverter.SetBoolValue(row[FunctionalProfileConstants.ModifyUserGroup.TrimAt()]);
                        functionalProfileData.UserAccountStatus = DatatypeConverter.SetBoolValue(row[FunctionalProfileConstants.UserAccountStatus.TrimAt()]);
                        functionalProfileData.ResetLoginPassword = DatatypeConverter.SetBoolValue(row[FunctionalProfileConstants.Reset_LoginPassword.TrimAt()]);
                        functionalProfileData.ModifyUser = DatatypeConverter.SetBoolValue(row[FunctionalProfileConstants.ModifyUser.TrimAt()]);
                        functionalProfileData.ProductOrMaterialRegistration = DatatypeConverter.SetBoolValue(row[FunctionalProfileConstants.ProductOrMaterialRegistration.TrimAt()]);
                        functionalProfileData.BatchOrLotParticulars = DatatypeConverter.SetBoolValue(row[FunctionalProfileConstants.BatchOrLotParticulars.TrimAt()]);
                        functionalProfileData.EquipmentRegistration = DatatypeConverter.SetBoolValue(row[FunctionalProfileConstants.EquipmentRegistration.TrimAt()]);
                        functionalProfileData.MarketRegistration = DatatypeConverter.SetBoolValue(row[FunctionalProfileConstants.MarketRegistration.TrimAt()]);
                        functionalProfileData.CustomerRegistration = DatatypeConverter.SetBoolValue(row[FunctionalProfileConstants.CustomerRegistration.TrimAt()]);
                        functionalProfileData.AuditTrial = DatatypeConverter.SetBoolValue(row[FunctionalProfileConstants.AuditTrial.TrimAt()]);
                        functionalProfileData.Remark = Convert.ToString(row[FunctionalProfileConstants.Remark.TrimAt()]);
                        functionalProfileData.CreatedBy = Convert.ToString(row[FunctionalProfileConstants.CreatedBy.TrimAt()]);
                        functionalProfileData.CreatedDate = DatatypeConverter.SetDateTime(row[FunctionalProfileConstants.CreatedDate.TrimAt()]);
                        functionalProfileData.ModifiedBy = Convert.ToString(row[FunctionalProfileConstants.ModifiedBy.TrimAt()]);
                        functionalProfileData.ModifiedDate = DatatypeConverter.SetDateTime(row[FunctionalProfileConstants.ModifiedDate.TrimAt()]);
                        result.Add(functionalProfileData);
                    }
                }
                return result;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public static FunctionalProfile SetFunctionalProfile(DataSet dataset)
        {
            var result = SetAllFunctionalProfile(dataset);
            if (result.Count > 0)
            {
                return result.FirstOrDefault();
            }
            return null;
        }
        
        public static DataTable SetDataSet(List<FunctionalProfile> functionalProfiles)
        {
            DataTable dataTable = new DataTable();
            DataRow row = null;
            SetDataTableColumns(dataTable);
            try
            {
                if (functionalProfiles != null && functionalProfiles.Count > 0)
                {
                    for (int i = 0; (i < functionalProfiles.Count); i = (i + 1))
                    {
                        row = dataTable.NewRow();
                        row[FunctionalProfileConstants.Id.TrimAt()] = functionalProfiles[i].Id;
                        row[FunctionalProfileConstants.RoleId.TrimAt()] = functionalProfiles[i].RoleId;
                        row[FunctionalProfileConstants.ChangeControlInitiation.TrimAt()] = functionalProfiles[i].ChangeControlInitiation;
                        row[FunctionalProfileConstants.CCHODReview.TrimAt()] = functionalProfiles[i].CCHODReview;
                        row[FunctionalProfileConstants.CCQAReview.TrimAt()] = functionalProfiles[i].CCQAReview;
                        row[FunctionalProfileConstants.CCCFTReview.TrimAt()] = functionalProfiles[i].CCCFTReview;
                        row[FunctionalProfileConstants.CCCustomerNotification.TrimAt()] = functionalProfiles[i].CCCustomerNotification;
                        row[FunctionalProfileConstants.CCQADecision.TrimAt()] = functionalProfiles[i].CCQADecision;
                        row[FunctionalProfileConstants.CCActionPlan.TrimAt()] = functionalProfiles[i].CCActionPlan;
                        row[FunctionalProfileConstants.CCFinalClosure.TrimAt()] = functionalProfiles[i].CCFinalClosure;
                        row[FunctionalProfileConstants.CCExtensionOfTargetDate.TrimAt()] = functionalProfiles[i].CCExtensionOfTargetDate;
                        row[FunctionalProfileConstants.CCWorkTransfer.TrimAt()] = functionalProfiles[i].CCWorkTransfer;
                        row[FunctionalProfileConstants.CCDossierPrint.TrimAt()] = functionalProfiles[i].CCDossierPrint;
                        row[FunctionalProfileConstants.CCAuditTrial.TrimAt()] = functionalProfiles[i].CCAuditTrial;
                        row[FunctionalProfileConstants.CCReport.TrimAt()] = functionalProfiles[i].CCReport;
                        row[FunctionalProfileConstants.DeviationInitiation.TrimAt()] = functionalProfiles[i].DeviationInitiation;
                        row[FunctionalProfileConstants.DIHODReview.TrimAt()] = functionalProfiles[i].DIHODReview;
                        row[FunctionalProfileConstants.DIQAReview.TrimAt()] = functionalProfiles[i].DIQAReview;
                        row[FunctionalProfileConstants.DICFTReview.TrimAt()] = functionalProfiles[i].DICFTReview;
                        row[FunctionalProfileConstants.DICustomerNotification.TrimAt()] = functionalProfiles[i].DICustomerNotification;
                        row[FunctionalProfileConstants.QAManager.TrimAt()] = functionalProfiles[i].QAManager;
                        row[FunctionalProfileConstants.Investigation.TrimAt()] = functionalProfiles[i].Investigation;
                        row[FunctionalProfileConstants.DIQADecision.TrimAt()] = functionalProfiles[i].DIQADecision;
                        row[FunctionalProfileConstants.DIActionPlan.TrimAt()] = functionalProfiles[i].DIActionPlan;
                        row[FunctionalProfileConstants.DIFinalClosure.TrimAt()] = functionalProfiles[i].DIFinalClosure;
                        row[FunctionalProfileConstants.DIExtensionOfTargetDate.TrimAt()] = functionalProfiles[i].DIExtensionOfTargetDate;
                        row[FunctionalProfileConstants.DIWorkTransfer.TrimAt()] = functionalProfiles[i].DIWorkTransfer;
                        row[FunctionalProfileConstants.DIDossierPrint.TrimAt()] = functionalProfiles[i].DIDossierPrint;
                        row[FunctionalProfileConstants.DIAuditTrial.TrimAt()] = functionalProfiles[i].DIAuditTrial;
                        row[FunctionalProfileConstants.DIReport.TrimAt()] = functionalProfiles[i].DIReport;
                        row[FunctionalProfileConstants.CAPAInitiation.TrimAt()] = functionalProfiles[i].CAPAInitiation;
                        row[FunctionalProfileConstants.CAPAHODReview.TrimAt()] = functionalProfiles[i].CAPAHODReview;
                        row[FunctionalProfileConstants.CAPAQAReview.TrimAt()] = functionalProfiles[i].CAPAQAReview;
                        row[FunctionalProfileConstants.CAPACFTReview.TrimAt()] = functionalProfiles[i].CAPACFTReview;
                        row[FunctionalProfileConstants.CAPAQADecision.TrimAt()] = functionalProfiles[i].CAPAQADecision;
                        row[FunctionalProfileConstants.CAPAActionPlan.TrimAt()] = functionalProfiles[i].CAPAActionPlan;
                        row[FunctionalProfileConstants.CAPAFinalClosure.TrimAt()] = functionalProfiles[i].CAPAFinalClosure;
                        row[FunctionalProfileConstants.CAPAExtensionOfTargetDate.TrimAt()] = functionalProfiles[i].CAPAExtensionOfTargetDate;
                        row[FunctionalProfileConstants.CAPAWorkTransfer.TrimAt()] = functionalProfiles[i].CAPAWorkTransfer;
                        row[FunctionalProfileConstants.CAPADossierPrint.TrimAt()] = functionalProfiles[i].CAPADossierPrint;
                        row[FunctionalProfileConstants.CAPAAuditTrial.TrimAt()] = functionalProfiles[i].CAPAAuditTrial;
                        row[FunctionalProfileConstants.CAPAReport.TrimAt()] = functionalProfiles[i].CAPAReport;
                        row[FunctionalProfileConstants.SecuritySetting.TrimAt()] = functionalProfiles[i].SecuritySetting;
                        row[FunctionalProfileConstants.NewRole.TrimAt()] = functionalProfiles[i].NewRole;
                        row[FunctionalProfileConstants.SetFunctionalProfile.TrimAt()] = functionalProfiles[i].SetFunctionalProfile;
                        row[FunctionalProfileConstants.NewUser.TrimAt()] = functionalProfiles[i].NewUser;
                        row[FunctionalProfileConstants.NewUserApproval.TrimAt()] = functionalProfiles[i].NewUserApproval;
                        row[FunctionalProfileConstants.PlantAssignment.TrimAt()] = functionalProfiles[i].PlantAssignment;
                        row[FunctionalProfileConstants.ModifyPlantAssignment.TrimAt()] = functionalProfiles[i].ModifyPlantAssignment;
                        row[FunctionalProfileConstants.UserGroup.TrimAt()] = functionalProfiles[i].UserGroup;
                        row[FunctionalProfileConstants.ModifyUserGroup.TrimAt()] = functionalProfiles[i].ModifyUserGroup;
                        row[FunctionalProfileConstants.UserAccountStatus.TrimAt()] = functionalProfiles[i].UserAccountStatus;
                        row[FunctionalProfileConstants.Reset_LoginPassword.TrimAt()] = functionalProfiles[i].ResetLoginPassword;
                        row[FunctionalProfileConstants.ModifyUser.TrimAt()] = functionalProfiles[i].ModifyUser;
                        row[FunctionalProfileConstants.ProductOrMaterialRegistration.TrimAt()] = functionalProfiles[i].ProductOrMaterialRegistration;
                        row[FunctionalProfileConstants.BatchOrLotParticulars.TrimAt()] = functionalProfiles[i].BatchOrLotParticulars;
                        row[FunctionalProfileConstants.EquipmentRegistration.TrimAt()] = functionalProfiles[i].EquipmentRegistration;
                        row[FunctionalProfileConstants.MarketRegistration.TrimAt()] = functionalProfiles[i].MarketRegistration;
                        row[FunctionalProfileConstants.CustomerRegistration.TrimAt()] = functionalProfiles[i].CustomerRegistration;
                        row[FunctionalProfileConstants.AuditTrial.TrimAt()] = functionalProfiles[i].AuditTrial;
                        row[FunctionalProfileConstants.Remark.TrimAt()] = functionalProfiles[i].Remark;
                        row[FunctionalProfileConstants.CreatedBy.TrimAt()] = functionalProfiles[i].CreatedBy;
                        row[FunctionalProfileConstants.CreatedDate.TrimAt()] = functionalProfiles[i].CreatedDate;
                        row[FunctionalProfileConstants.ModifiedBy.TrimAt()] = functionalProfiles[i].ModifiedBy;
                        row[FunctionalProfileConstants.ModifiedDate.TrimAt()] = functionalProfiles[i].ModifiedDate;
                        dataTable.Rows.Add(row);
                    }
                }
                return dataTable;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        private static void SetDataTableColumns(DataTable dataTable)
        {
            dataTable.TableName = "UT_FunctionalProfile_PSY";
            dataTable.Columns.Add(FunctionalProfileConstants.Id.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.RoleId.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.ChangeControlInitiation.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.CCHODReview.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.CCQAReview.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.CCCFTReview.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.CCCustomerNotification.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.CCQADecision.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.CCActionPlan.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.CCFinalClosure.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.CCExtensionOfTargetDate.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.CCWorkTransfer.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.CCDossierPrint.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.CCAuditTrial.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.CCReport.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.DeviationInitiation.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.DIHODReview.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.DIQAReview.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.DICFTReview.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.DICustomerNotification.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.QAManager.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.Investigation.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.DIQADecision.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.DIActionPlan.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.DIFinalClosure.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.DIExtensionOfTargetDate.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.DIWorkTransfer.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.DIDossierPrint.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.DIAuditTrial.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.DIReport.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.CAPAInitiation.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.CAPAHODReview.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.CAPAQAReview.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.CAPACFTReview.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.CAPAQADecision.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.CAPAActionPlan.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.CAPAFinalClosure.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.CAPAExtensionOfTargetDate.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.CAPAWorkTransfer.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.CAPADossierPrint.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.CAPAAuditTrial.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.CAPAReport.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.SecuritySetting.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.NewRole.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.SetFunctionalProfile.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.NewUser.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.NewUserApproval.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.PlantAssignment.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.ModifyPlantAssignment.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.UserGroup.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.ModifyUserGroup.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.UserAccountStatus.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.Reset_LoginPassword.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.ModifyUser.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.ProductOrMaterialRegistration.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.BatchOrLotParticulars.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.EquipmentRegistration.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.MarketRegistration.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.CustomerRegistration.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.AuditTrial.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.Remark.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.CreatedBy.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.CreatedDate.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.ModifiedBy.TrimAt());
            dataTable.Columns.Add(FunctionalProfileConstants.ModifiedDate.TrimAt());
        }
    }
}
