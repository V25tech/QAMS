//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QAMS.Tests
{
    using System;
    using System.Data;
    using System.Data.SqlClient;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using QAMS.Common.Entities;
    using QAMS.Entities;
    using QAMS.Sheet1.Data;
    using QAMS.Sheet1.Services;
    using Moq;
    using NUnit.Framework;
    
    
    /// <summary>
    /// Comment
    /// </summary>
    public class HODReviewTest
    {
        
        private Mock<IHODReviewData> hODReviewData;
        
        private IHODReviewService hODReviewService;
        
        [SetUp()]
        public void Setup()
        {
              hODReviewData = new Mock<IHODReviewData>();
              hODReviewService = new HODReviewService(hODReviewData.Object);
        }
        
        [Test()]
        public void GetAllHODReview()
        {
            List<HODReview> hODReview = new List<HODReview>();
            RequestContext requestContext = new RequestContext();
            requestContext.PageNumber=1;
            requestContext.PageSize=10;
            hODReviewData.Setup(p=>p.GetAllHODReview(requestContext)).Returns(MockHODReviewData());
            var result = hODReviewService.GetAllHODReview(requestContext);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void GetHODReviewByHodId()
        {
            int hodId = 0;
            hODReviewData.Setup(p=>p.GetHODReviewByHodId(hodId)).Returns(MockHODReviewData());
            var result = hODReviewService.GetHODReviewByHodId(hodId);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void SaveHODReview()
        {
            HODReview hODReview = HODReviewViewModel();
            System.Boolean hodId = false;
            hODReviewData.Setup(p=>p.SaveHODReview(hODReview)).Returns(hodId);
            var result = hODReviewService.SaveHODReview(hODReview);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void UpdateHODReview()
        {
            HODReview hODReview = HODReviewViewModel();
            bool hodId = false;
            hODReviewData.Setup(p=>p.UpdateHODReview(hODReview)).Returns(hodId);
            var result = hODReviewService.UpdateHODReview(hODReview);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void DeleteHODReviewByHodId()
        {
            int hodId = 0;
            bool result = false;
            hODReviewData.Setup(p=>p.DeleteHODReviewByHodId(hodId)).Returns(result);
            var hODReview = hODReviewService.DeleteHODReviewByHodId(hodId);
            Assert.IsNotNull(hODReview);
        }
        
        public DataSet MockHODReviewData()
        {
            DataSet dataset = new DataSet();
            DataTable dataTable = new DataTable();
            dataset.Tables.Add(dataTable);
            return dataset;
        }
        
        public HODReview HODReviewViewModel()
        {
            try
            {
                HODReview hODReview = new HODReview();
                return hODReview;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
    }
}
