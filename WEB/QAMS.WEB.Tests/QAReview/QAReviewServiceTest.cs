//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QAMS.Tests
{
    using System;
    using System.Data;
    using System.Data.SqlClient;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using QAMS.Common.Entities;
    using QAMS.Entities;
    using QAMS.Sheet1.Data;
    using QAMS.Sheet1.Services;
    using Moq;
    using NUnit.Framework;
    
    
    /// <summary>
    /// Comment
    /// </summary>
    public class QAReviewTest
    {
        
        private Mock<IQAReviewData> qAReviewData;
        
        private IQAReviewService qAReviewService;
        
        [SetUp()]
        public void Setup()
        {
              qAReviewData = new Mock<IQAReviewData>();
              qAReviewService = new QAReviewService(qAReviewData.Object);
        }
        
        [Test()]
        public void GetAllQAReview()
        {
            List<QAReview> qAReview = new List<QAReview>();
            RequestContext requestContext = new RequestContext();
            requestContext.PageNumber=1;
            requestContext.PageSize=10;
            qAReviewData.Setup(p=>p.GetAllQAReview(requestContext)).Returns(MockQAReviewData());
            var result = qAReviewService.GetAllQAReview(requestContext);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void GetQAReviewByQAId()
        {
            int qAId = 0;
            qAReviewData.Setup(p=>p.GetQAReviewByQAId(qAId)).Returns(MockQAReviewData());
            var result = qAReviewService.GetQAReviewByQAId(qAId);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void SaveQAReview()
        {
            QAReview qAReview = QAReviewViewModel();
            System.Boolean qAId = false;
            qAReviewData.Setup(p=>p.SaveQAReview(qAReview)).Returns(qAId);
            var result = qAReviewService.SaveQAReview(qAReview);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void UpdateQAReview()
        {
            QAReview qAReview = QAReviewViewModel();
            bool qAId = false;
            qAReviewData.Setup(p=>p.UpdateQAReview(qAReview)).Returns(qAId);
            var result = qAReviewService.UpdateQAReview(qAReview);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void DeleteQAReviewByQAId()
        {
            int qAId = 0;
            bool result = false;
            qAReviewData.Setup(p=>p.DeleteQAReviewByQAId(qAId)).Returns(result);
            var qAReview = qAReviewService.DeleteQAReviewByQAId(qAId);
            Assert.IsNotNull(qAReview);
        }
        
        public DataSet MockQAReviewData()
        {
            DataSet dataset = new DataSet();
            DataTable dataTable = new DataTable();
            dataset.Tables.Add(dataTable);
            return dataset;
        }
        
        public QAReview QAReviewViewModel()
        {
            try
            {
                QAReview qAReview = new QAReview();
                return qAReview;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
    }
}
