//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QAMS.Tests
{
    using System;
    using System.Data;
    using System.Data.SqlClient;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using QAMS.Common.Entities;
    using QAMS.Entities;
    using QAMS.Sheet1.Data;
    using QAMS.Sheet1.Services;
    using Moq;
    using NUnit.Framework;
    
    
    /// <summary>
    /// Comment
    /// </summary>
    public class QADecisionTest
    {
        
        private Mock<IQADecisionData> qADecisionData;
        
        private IQADecisionService qADecisionService;
        
        [SetUp()]
        public void Setup()
        {
              qADecisionData = new Mock<IQADecisionData>();
              qADecisionService = new QADecisionService(qADecisionData.Object);
        }
        
        [Test()]
        public void GetAllQADecision()
        {
            List<QADecision> qADecision = new List<QADecision>();
            RequestContext requestContext = new RequestContext();
            requestContext.PageNumber=1;
            requestContext.PageSize=10;
            qADecisionData.Setup(p=>p.GetAllQADecision(requestContext)).Returns(MockQADecisionData());
            var result = qADecisionService.GetAllQADecision(requestContext);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void GetQADecisionByQADId()
        {
            int qADId = 0;
            qADecisionData.Setup(p=>p.GetQADecisionByQADId(qADId)).Returns(MockQADecisionData());
            var result = qADecisionService.GetQADecisionByQADId(qADId);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void SaveQADecision()
        {
            QADecision qADecision = QADecisionViewModel();
            System.Boolean qADId = false;
            qADecisionData.Setup(p=>p.SaveQADecision(qADecision)).Returns(qADId);
            var result = qADecisionService.SaveQADecision(qADecision);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void UpdateQADecision()
        {
            QADecision qADecision = QADecisionViewModel();
            bool qADId = false;
            qADecisionData.Setup(p=>p.UpdateQADecision(qADecision)).Returns(qADId);
            var result = qADecisionService.UpdateQADecision(qADecision);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void DeleteQADecisionByQADId()
        {
            int qADId = 0;
            bool result = false;
            qADecisionData.Setup(p=>p.DeleteQADecisionByQADId(qADId)).Returns(result);
            var qADecision = qADecisionService.DeleteQADecisionByQADId(qADId);
            Assert.IsNotNull(qADecision);
        }
        
        public DataSet MockQADecisionData()
        {
            DataSet dataset = new DataSet();
            DataTable dataTable = new DataTable();
            dataset.Tables.Add(dataTable);
            return dataset;
        }
        
        public QADecision QADecisionViewModel()
        {
            try
            {
                QADecision qADecision = new QADecision();
                return qADecision;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
    }
}
