//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QAMS.Tests
{
    using System;
    using System.Data;
    using System.Data.SqlClient;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using QAMS.Common.Entities;
    using QAMS.Entities;
    using QAMS.Sheet1.Data;
    using QAMS.Sheet1.Services;
    using Moq;
    using NUnit.Framework;
    
    
    /// <summary>
    /// Comment
    /// </summary>
    public class CustomerNotificationTest
    {
        
        private Mock<ICustomerNotificationData> customerNotificationData;
        
        private ICustomerNotificationService customerNotificationService;
        
        [SetUp()]
        public void Setup()
        {
              customerNotificationData = new Mock<ICustomerNotificationData>();
              customerNotificationService = new CustomerNotificationService(customerNotificationData.Object);
        }
        
        [Test()]
        public void GetAllCustomerNotification()
        {
            List<CustomerNotification> customerNotification = new List<CustomerNotification>();
            RequestContext requestContext = new RequestContext();
            requestContext.PageNumber=1;
            requestContext.PageSize=10;
            customerNotificationData.Setup(p=>p.GetAllCustomerNotification(requestContext)).Returns(MockCustomerNotificationData());
            var result = customerNotificationService.GetAllCustomerNotification(requestContext);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void GetCustomerNotificationByCNId()
        {
            int cNId = 0;
            customerNotificationData.Setup(p=>p.GetCustomerNotificationByCNId(cNId)).Returns(MockCustomerNotificationData());
            var result = customerNotificationService.GetCustomerNotificationByCNId(cNId);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void SaveCustomerNotification()
        {
            CustomerNotification customerNotification = CustomerNotificationViewModel();
            System.Boolean cNId = false;
            customerNotificationData.Setup(p=>p.SaveCustomerNotification(customerNotification)).Returns(cNId);
            var result = customerNotificationService.SaveCustomerNotification(customerNotification);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void UpdateCustomerNotification()
        {
            CustomerNotification customerNotification = CustomerNotificationViewModel();
            bool cNId = false;
            customerNotificationData.Setup(p=>p.UpdateCustomerNotification(customerNotification)).Returns(cNId);
            var result = customerNotificationService.UpdateCustomerNotification(customerNotification);
            Assert.IsNotNull(result);
        }
        
        [Test()]
        public void DeleteCustomerNotificationByCNId()
        {
            int cNId = 0;
            bool result = false;
            customerNotificationData.Setup(p=>p.DeleteCustomerNotificationByCNId(cNId)).Returns(result);
            var customerNotification = customerNotificationService.DeleteCustomerNotificationByCNId(cNId);
            Assert.IsNotNull(customerNotification);
        }
        
        public DataSet MockCustomerNotificationData()
        {
            DataSet dataset = new DataSet();
            DataTable dataTable = new DataTable();
            dataset.Tables.Add(dataTable);
            return dataset;
        }
        
        public CustomerNotification CustomerNotificationViewModel()
        {
            try
            {
                CustomerNotification customerNotification = new CustomerNotification();
                return customerNotification;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
    }
}
