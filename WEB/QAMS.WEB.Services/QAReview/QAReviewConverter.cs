//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QAMS.Sheet1.Services
{
    using System;
    using System.Text;
    using System.IO;
    using System.Linq;
    using System.Data;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using QAMS.Entities;
    using VAMLIbrary.Core.Extentions;
    using QAMS.Common.Entities;
    using QAMS.WEB.Services;


    // Comment
    public static class QAReviewConverter
    {
        
        public static List<QAReview> SetAllQAReview(DataSet dataset)
        {
            try
            {
                List<QAReview> result = new List<QAReview>();
                QAReview qAReviewData;
                if (dataset != null && dataset.Tables.Count > 0 && dataset.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; (i < dataset.Tables[0].Rows.Count); i = (i + 1))
                    {
                        DataRow row = dataset.Tables[0].Rows[i];
                        qAReviewData = new QAReview();
                        qAReviewData.ClassificationOfChange = DatatypeConverter.SetBoolValue(row[QAReviewConstants.ClassificationOfChange.TrimAt()]);
                        qAReviewData.ImpactOnProcFormats = DatatypeConverter.SetBoolValue(row[QAReviewConstants.ImpactOnProcFormats.TrimAt()]);
                        qAReviewData.ProcedureFormat = Convert.ToString(row[QAReviewConstants.ProcedureFormat.TrimAt()]);
                        qAReviewData.IsRegularCustomer = DatatypeConverter.SetBoolValue(row[QAReviewConstants.IsRegularCustomer.TrimAt()]);
                        qAReviewData.ImpactCommitment = Convert.ToString(row[QAReviewConstants.ImpactCommitment.TrimAt()]);
                        qAReviewData.ReviewComments = Convert.ToString(row[QAReviewConstants.ReviewComments.TrimAt()]);
                        qAReviewData.InitiativeId = DatatypeConverter.SetIntValue(row[QAReviewConstants.InitiativeId.TrimAt()]);
                        qAReviewData.InitiativeName = Convert.ToString(row[QAReviewConstants.InitiativeName.TrimAt()]);
                        qAReviewData.IsSave = DatatypeConverter.SetBoolValue(row[QAReviewConstants.IsSave.TrimAt()]);
                        qAReviewData.Status = Convert.ToString(row[QAReviewConstants.Status.TrimAt()]);
                        qAReviewData.CreatedBy = DatatypeConverter.SetIntValue(row[QAReviewConstants.CreatedBy.TrimAt()]);
                        qAReviewData.UpdatedBy = DatatypeConverter.SetIntValue(row[QAReviewConstants.UpdatedBy.TrimAt()]);
                        qAReviewData.CreatedDate = DatatypeConverter.SetDateTime(row[QAReviewConstants.CreatedDate.TrimAt()]);
                        qAReviewData.UpdatedDate = DatatypeConverter.SetDateTime(row[QAReviewConstants.UpdatedDate.TrimAt()]);
                        qAReviewData.Plant = DatatypeConverter.SetIntValue(row[QAReviewConstants.Plant.TrimAt()]);
                        qAReviewData.QAId = DatatypeConverter.SetIntValue(row[QAReviewConstants.QAId.TrimAt()]);
                        qAReviewData.QaDocument = Convert.ToString(row[QAReviewConstants.QaDocument.TrimAt()]);
                        qAReviewData.ModifiedBy = Convert.ToString(row[QAReviewConstants.ModifiedBy.TrimAt()]);
                        qAReviewData.ModifiedDate = DatatypeConverter.SetDateTime(row[QAReviewConstants.ModifiedDate.TrimAt()]);
                        result.Add(qAReviewData);
                    }
                }
                return result;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public static QAReview SetQAReview(DataSet dataset)
        {
            var result = SetAllQAReview(dataset);
            if (result.Count > 0)
            {
                return result.FirstOrDefault();
            }
            return null;
        }
    }
}
