//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QAMS.Sheet1.Services
{
    using System;
    using System.Text;
    using System.IO;
    using System.Linq;
    using System.Data;
    using System.Collections.Generic;
    using QAMS.Common.Entities;
    using QAMS.Entities;
    using QAMS.Sheet1.Data;
    using QAMS.WEB.Services;


    // Comment
    public class ClosureService : IClosureService
    {
        
        private readonly IClosureData closureData;
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="closureData"></param>
        public ClosureService(IClosureData closureData)
        {
            this.closureData = closureData;
        }
        
        public ResponseContext<Closure> GetAllClosure(RequestContext requestContext)
        {
            try
            {
                DataSet dataset = closureData.GetAllClosure(requestContext);
                List<Closure> result = ClosureConverter.SetAllClosure(dataset);
                return new ResponseContext<Closure>() { RowCount = CommonConverter.SetRowsCount(dataset), Response = result };
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public Closure GetClosureByCId(System.Int32? cId)
        {
            try
            {
                DataSet dataset = closureData.GetClosureByCId(cId);
                Closure result = ClosureConverter.SetClosure(dataset);
                return result;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool SaveClosure(Closure closure)
        {
            try
            {
                String validationMessages = ClosureValidator.IsValidClosure(closure);
                if (validationMessages.Length <= 0)
                {
                    var result = closureData.SaveClosure(closure);
                    return result;
                }
                throw new System.Exception(validationMessages);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool UpdateClosure(Closure closure)
        {
            try
            {
                String validationMessages = ClosureValidator.IsValidClosure(closure);
                if (validationMessages.Length <= 0)
                {
                    bool result = closureData.UpdateClosure(closure);
                    return result;
                }
                throw new System.Exception(validationMessages);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteClosureByCId(System.Int32? cId)
        {
            try
            {
                return closureData.DeleteClosureByCId(cId);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteAllClosure(List<int> cIds)
        {
            try
            {
                return closureData.DeleteAllClosure(cIds);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
    }
}
