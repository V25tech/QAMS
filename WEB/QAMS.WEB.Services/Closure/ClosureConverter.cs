//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QAMS.Sheet1.Services
{
    using System;
    using System.Text;
    using System.IO;
    using System.Linq;
    using System.Data;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using QAMS.Entities;
    using VAMLIbrary.Core.Extentions;
    using QAMS.Common.Entities;
    using QAMS.WEB.Services;


    // Comment
    public static class ClosureConverter
    {
        
        public static List<Closure> SetAllClosure(DataSet dataset)
        {
            try
            {
                List<Closure> result = new List<Closure>();
                Closure closureData;
                if (dataset != null && dataset.Tables.Count > 0 && dataset.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; (i < dataset.Tables[0].Rows.Count); i = (i + 1))
                    {
                        DataRow row = dataset.Tables[0].Rows[i];
                        closureData = new Closure();
                        closureData.InitiativeId = DatatypeConverter.SetIntValue(row[ClosureConstants.InitiativeId.TrimAt()]);
                        closureData.InitiativeName = Convert.ToString(row[ClosureConstants.InitiativeName.TrimAt()]);
                        closureData.IsSave = DatatypeConverter.SetBoolValue(row[ClosureConstants.IsSave.TrimAt()]);
                        closureData.ImplementEffChanges = Convert.ToString(row[ClosureConstants.ImplementEffChanges.TrimAt()]);
                        closureData.Status = Convert.ToString(row[ClosureConstants.Status.TrimAt()]);
                        closureData.CreatedBy = DatatypeConverter.SetIntValue(row[ClosureConstants.CreatedBy.TrimAt()]);
                        closureData.UpdatedBy = DatatypeConverter.SetIntValue(row[ClosureConstants.UpdatedBy.TrimAt()]);
                        closureData.CreatedDate = DatatypeConverter.SetDateTime(row[ClosureConstants.CreatedDate.TrimAt()]);
                        closureData.UpdatedDate = DatatypeConverter.SetDateTime(row[ClosureConstants.UpdatedDate.TrimAt()]);
                        closureData.Plant = DatatypeConverter.SetIntValue(row[ClosureConstants.Plant.TrimAt()]);
                        closureData.CId = DatatypeConverter.SetIntValue(row[ClosureConstants.CId.TrimAt()]);
                        closureData.Decision = Convert.ToString(row[ClosureConstants.Decision.TrimAt()]);
                        closureData.Remarks = Convert.ToString(row[ClosureConstants.Remarks.TrimAt()]);
                        closureData.ActionPlanReviewComments = Convert.ToString(row[ClosureConstants.ActionPlanReviewComments.TrimAt()]);
                        closureData.IsAllDocumentsApprovedEff = DatatypeConverter.SetBoolValue(row[ClosureConstants.IsAllDocumentsApprovedEff.TrimAt()]);
                        closureData.TrainingCompleted = DatatypeConverter.SetBoolValue(row[ClosureConstants.TrainingCompleted.TrimAt()]);
                        closureData.IsApprovedChangesEff = DatatypeConverter.SetBoolValue(row[ClosureConstants.IsApprovedChangesEff.TrimAt()]);
                        closureData.IsIdentifiedActions = DatatypeConverter.SetBoolValue(row[ClosureConstants.IsIdentifiedActions.TrimAt()]);
                        closureData.CDocument = Convert.ToString(row[ClosureConstants.CDocument.TrimAt()]);
                        closureData.ModifiedBy = Convert.ToString(row[ClosureConstants.ModifiedBy.TrimAt()]);
                        closureData.ModifiedDate = DatatypeConverter.SetDateTime(row[ClosureConstants.ModifiedDate.TrimAt()]);
                        result.Add(closureData);
                    }
                }
                return result;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public static Closure SetClosure(DataSet dataset)
        {
            var result = SetAllClosure(dataset);
            if (result.Count > 0)
            {
                return result.FirstOrDefault();
            }
            return null;
        }
    }
}
