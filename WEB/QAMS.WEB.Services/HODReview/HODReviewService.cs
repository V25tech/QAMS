//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QAMS.Sheet1.Services
{
    using System;
    using System.Text;
    using System.IO;
    using System.Linq;
    using System.Data;
    using System.Collections.Generic;
    using QAMS.Common.Entities;
    using QAMS.Entities;
    using QAMS.Sheet1.Data;
    using QAMS.WEB.Services;


    // Comment
    public class HODReviewService : IHODReviewService
    {
        
        private readonly IHODReviewData hODReviewData;
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="hODReviewData"></param>
        public HODReviewService(IHODReviewData hODReviewData)
        {
            this.hODReviewData = hODReviewData;
        }
        
        public ResponseContext<HODReview> GetAllHODReview(RequestContext requestContext)
        {
            try
            {
                DataSet dataset = hODReviewData.GetAllHODReview(requestContext);
                List<HODReview> result = HODReviewConverter.SetAllHODReview(dataset);
                return new ResponseContext<HODReview>() { RowCount = CommonConverter.SetRowsCount(dataset), Response = result };
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public HODReview GetHODReviewByHodId(System.Int32? hodId)
        {
            try
            {
                DataSet dataset = hODReviewData.GetHODReviewByHodId(hodId);
                HODReview result = HODReviewConverter.SetHODReview(dataset);
                return result;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        public HODReview GetHODReviewByInit(System.Int32? initId)
        {
            try
            {
                DataSet dataset = hODReviewData.GetHODReviewByInit(initId);
                HODReview result = HODReviewConverter.SetHODReview(dataset);
                return result;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }

        public bool SaveHODReview(HODReview hODReview)
        {
            try
            {
                String validationMessages = HODReviewValidator.IsValidHODReview(hODReview);
                if (validationMessages.Length <= 0)
                {
                    var result = hODReviewData.SaveHODReview(hODReview);
                    return result;
                }
                throw new System.Exception(validationMessages);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool UpdateHODReview(HODReview hODReview)
        {
            try
            {
                String validationMessages = HODReviewValidator.IsValidHODReview(hODReview);
                if (validationMessages.Length <= 0)
                {
                    bool result = hODReviewData.UpdateHODReview(hODReview);
                    return result;
                }
                throw new System.Exception(validationMessages);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteHODReviewByHodId(System.Int32? hodId)
        {
            try
            {
                return hODReviewData.DeleteHODReviewByHodId(hodId);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteAllHODReview(List<int> hodIds)
        {
            try
            {
                return hODReviewData.DeleteAllHODReview(hodIds);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
    }
}
