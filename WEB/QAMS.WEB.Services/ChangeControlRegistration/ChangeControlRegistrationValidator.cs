//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QAMS.WEB.Services
{
    using System;
    using System.Text;
    using System.IO;
    using System.Linq;
    using System.Data;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using QAMS.WEB.Entities;
    using VAMLIbrary.Core.Validators;
    
    
    // Comment
    public static class ChangeControlRegistrationValidator
    {
        
        public static string IsValidChangeControlRegistration(ChangeControlRegistration changeControlRegistration)
        {
            try
            {
                StringBuilder validationMessages = new StringBuilder();
                ValidationHelper validationHelper = new ValidationHelper();
                validationMessages.Append(validationHelper.NullCheckValidator(changeControlRegistration.ChangeControlUniqueCode, nameof(changeControlRegistration.ChangeControlUniqueCode)));
                validationMessages.Append(validationHelper.LengthCheckValidator(changeControlRegistration.ChangeControlUniqueCode,150, nameof(changeControlRegistration.ChangeControlUniqueCode)));
                validationMessages.Append(validationHelper.LengthCheckValidator(changeControlRegistration.ExternalReference,250, nameof(changeControlRegistration.ExternalReference)));
                validationMessages.Append(validationHelper.LengthCheckValidator(changeControlRegistration.BatchOrLotDetail,250, nameof(changeControlRegistration.BatchOrLotDetail)));
                validationMessages.Append(validationHelper.LengthCheckValidator(changeControlRegistration.DocumentDetails,250, nameof(changeControlRegistration.DocumentDetails)));
                validationMessages.Append(validationHelper.LengthCheckValidator(changeControlRegistration.FacilityUtilityDetails,250, nameof(changeControlRegistration.FacilityUtilityDetails)));
                validationMessages.Append(validationHelper.LengthCheckValidator(changeControlRegistration.ValidationDetails,250, nameof(changeControlRegistration.ValidationDetails)));
                validationMessages.Append(validationHelper.LengthCheckValidator(changeControlRegistration.PackingDetails,250, nameof(changeControlRegistration.PackingDetails)));
                validationMessages.Append(validationHelper.LengthCheckValidator(changeControlRegistration.SoftwareDetails,250, nameof(changeControlRegistration.SoftwareDetails)));
                validationMessages.Append(validationHelper.LengthCheckValidator(changeControlRegistration.TestingDetails,250, nameof(changeControlRegistration.TestingDetails)));
                validationMessages.Append(validationHelper.LengthCheckValidator(changeControlRegistration.SupplierServiceProviderDetails,250, nameof(changeControlRegistration.SupplierServiceProviderDetails)));
                validationMessages.Append(validationHelper.LengthCheckValidator(changeControlRegistration.ProcessDetails,250, nameof(changeControlRegistration.ProcessDetails)));
                validationMessages.Append(validationHelper.LengthCheckValidator(changeControlRegistration.OtherDetails,250, nameof(changeControlRegistration.OtherDetails)));
                validationMessages.Append(validationHelper.NullCheckValidator(changeControlRegistration.ElementalImpuritiesAssesmentReason, nameof(changeControlRegistration.ElementalImpuritiesAssesmentReason)));
                validationMessages.Append(validationHelper.LengthCheckValidator(changeControlRegistration.ElementalImpuritiesAssesmentReason,250, nameof(changeControlRegistration.ElementalImpuritiesAssesmentReason)));
                validationMessages.Append(validationHelper.LengthCheckValidator(changeControlRegistration.NitrosamineImpuritiesAssesmentReason,250, nameof(changeControlRegistration.NitrosamineImpuritiesAssesmentReason)));
                validationMessages.Append(validationHelper.LengthCheckValidator(changeControlRegistration.GenotxicImpuritiesAssesmentReason,250, nameof(changeControlRegistration.GenotxicImpuritiesAssesmentReason)));
                validationMessages.Append(validationHelper.NullCheckValidator(changeControlRegistration.ExistingProcedure, nameof(changeControlRegistration.ExistingProcedure)));
                validationMessages.Append(validationHelper.LengthCheckValidator(changeControlRegistration.ExistingProcedure,2000, nameof(changeControlRegistration.ExistingProcedure)));
                validationMessages.Append(validationHelper.NullCheckValidator(changeControlRegistration.ProposedChange, nameof(changeControlRegistration.ProposedChange)));
                validationMessages.Append(validationHelper.LengthCheckValidator(changeControlRegistration.ProposedChange,2000, nameof(changeControlRegistration.ProposedChange)));
                validationMessages.Append(validationHelper.NullCheckValidator(changeControlRegistration.JustificationForProposedChange, nameof(changeControlRegistration.JustificationForProposedChange)));
                validationMessages.Append(validationHelper.LengthCheckValidator(changeControlRegistration.JustificationForProposedChange,2000, nameof(changeControlRegistration.JustificationForProposedChange)));
                validationMessages.Append(validationHelper.NullCheckValidator(changeControlRegistration.Comments, nameof(changeControlRegistration.Comments)));
                validationMessages.Append(validationHelper.LengthCheckValidator(changeControlRegistration.Comments,250, nameof(changeControlRegistration.Comments)));
                validationMessages.Append(validationHelper.NullCheckValidator(changeControlRegistration.CreatedBy, nameof(changeControlRegistration.CreatedBy)));
                validationMessages.Append(validationHelper.LengthCheckValidator(changeControlRegistration.CreatedBy,150, nameof(changeControlRegistration.CreatedBy)));
                validationMessages.Append(validationHelper.NullCheckValidator(changeControlRegistration.ModifiedBy, nameof(changeControlRegistration.ModifiedBy)));
                validationMessages.Append(validationHelper.LengthCheckValidator(changeControlRegistration.ModifiedBy,150, nameof(changeControlRegistration.ModifiedBy)));
                if (!String.IsNullOrEmpty(validationMessages.ToString()))
                {
                    return Convert.ToString(validationMessages.Remove(validationMessages.ToString().LastIndexOf(','),1));
                }
                else
                {
                    return Convert.ToString(validationMessages);
                }
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
    }
}
