//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QAMS.Sheet1.Services
{
    using System;
    using System.Text;
    using System.IO;
    using System.Linq;
    using System.Data;
    using System.Collections.Generic;
    using QAMS.Common.Entities;
    using QAMS.Entities;
    using QAMS.Sheet1.Data;
    using QAMS.WEB.Services;


    // Comment
    public class QADecisionService : IQADecisionService
    {
        
        private readonly IQADecisionData qADecisionData;
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="qADecisionData"></param>
        public QADecisionService(IQADecisionData qADecisionData)
        {
            this.qADecisionData = qADecisionData;
        }
        
        public ResponseContext<QADecision> GetAllQADecision(RequestContext requestContext)
        {
            try
            {
                DataSet dataset = qADecisionData.GetAllQADecision(requestContext);
                List<QADecision> result = QADecisionConverter.SetAllQADecision(dataset);
                return new ResponseContext<QADecision>() { RowCount = CommonConverter.SetRowsCount(dataset), Response = result };
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public QADecision GetQADecisionByQADId(System.Int32? qADId)
        {
            try
            {
                DataSet dataset = qADecisionData.GetQADecisionByQADId(qADId);
                QADecision result = QADecisionConverter.SetQADecision(dataset);
                return result;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool SaveQADecision(QADecision qADecision)
        {
            try
            {
                String validationMessages = QADecisionValidator.IsValidQADecision(qADecision);
                if (validationMessages.Length <= 0)
                {
                    var result = qADecisionData.SaveQADecision(qADecision);
                    return result;
                }
                throw new System.Exception(validationMessages);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool UpdateQADecision(QADecision qADecision)
        {
            try
            {
                String validationMessages = QADecisionValidator.IsValidQADecision(qADecision);
                if (validationMessages.Length <= 0)
                {
                    bool result = qADecisionData.UpdateQADecision(qADecision);
                    return result;
                }
                throw new System.Exception(validationMessages);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteQADecisionByQADId(System.Int32? qADId)
        {
            try
            {
                return qADecisionData.DeleteQADecisionByQADId(qADId);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteAllQADecision(List<int> qADIds)
        {
            try
            {
                return qADecisionData.DeleteAllQADecision(qADIds);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
    }
}
