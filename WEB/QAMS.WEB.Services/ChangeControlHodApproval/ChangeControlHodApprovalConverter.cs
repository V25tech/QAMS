//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QAMS.WEB.Services
{
    using System;
    using System.Text;
    using System.IO;
    using System.Linq;
    using System.Data;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using QAMS.WEB.Entities;
    using VAMLIbrary.Core.Extentions;
    using QAMS.Common.Entities;
    
    
    // Comment
    public static class ChangeControlHodApprovalConverter
    {
        
        public static List<ChangeControlHodApproval> SetAllChangeControlHodApproval(DataSet dataset)
        {
            try
            {
                List<ChangeControlHodApproval> result = new List<ChangeControlHodApproval>();
                ChangeControlHodApproval changeControlHodApprovalData;
                if (dataset != null && dataset.Tables.Count > 0 && dataset.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; (i < dataset.Tables[0].Rows.Count); i = (i + 1))
                    {
                        DataRow row = dataset.Tables[0].Rows[i];
                        changeControlHodApprovalData = new ChangeControlHodApproval();
                        changeControlHodApprovalData.ChangeControlHodApprovalId = DatatypeConverter.SetIntValue(row[ChangeControlHodApprovalConstants.ChangeControlHodApprovalId.TrimAt()]);
                        changeControlHodApprovalData.ChangeControlId = DatatypeConverter.SetIntValue(row[ChangeControlHodApprovalConstants.ChangeControlId.TrimAt()]);
                        changeControlHodApprovalData.ActionPlanProposalRequired = DatatypeConverter.SetBoolValue(row[ChangeControlHodApprovalConstants.ActionPlanProposalRequired.TrimAt()]);
                        changeControlHodApprovalData.ProposedActionPlans = Convert.ToString(row[ChangeControlHodApprovalConstants.ProposedActionPlans.TrimAt()]);
                        changeControlHodApprovalData.HodReviewComments = Convert.ToString(row[ChangeControlHodApprovalConstants.HodReviewComments.TrimAt()]);
                        changeControlHodApprovalData.Documents = Convert.ToString(row[ChangeControlHodApprovalConstants.Documents.TrimAt()]);
                        changeControlHodApprovalData.Remarks = Convert.ToString(row[ChangeControlHodApprovalConstants.Remarks.TrimAt()]);
                        changeControlHodApprovalData.CreatedBy = Convert.ToString(row[ChangeControlHodApprovalConstants.CreatedBy.TrimAt()]);
                        changeControlHodApprovalData.CreatedDate = DatatypeConverter.SetDateTime(row[ChangeControlHodApprovalConstants.CreatedDate.TrimAt()]);
                        changeControlHodApprovalData.ModifiedBy = Convert.ToString(row[ChangeControlHodApprovalConstants.ModifiedBy.TrimAt()]);
                        changeControlHodApprovalData.ModifiedDate = DatatypeConverter.SetDateTime(row[ChangeControlHodApprovalConstants.ModifiedDate.TrimAt()]);
                        result.Add(changeControlHodApprovalData);
                    }
                }
                return result;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public static ChangeControlHodApproval SetChangeControlHodApproval(DataSet dataset)
        {
            var result = SetAllChangeControlHodApproval(dataset);
            if (result.Count > 0)
            {
                return result.FirstOrDefault();
            }
            return null;
        }
        
        public static DataTable SetDataSet(List<ChangeControlHodApproval> changeControlHodApprovals)
        {
            DataTable dataTable = new DataTable();
            DataRow row = null;
            SetDataTableColumns(dataTable);
            try
            {
                if (changeControlHodApprovals != null && changeControlHodApprovals.Count > 0)
                {
                    for (int i = 0; (i < changeControlHodApprovals.Count); i = (i + 1))
                    {
                        row = dataTable.NewRow();
                        row[ChangeControlHodApprovalConstants.ChangeControlHodApprovalId.TrimAt()] = changeControlHodApprovals[i].ChangeControlHodApprovalId;
                        row[ChangeControlHodApprovalConstants.ChangeControlId.TrimAt()] = changeControlHodApprovals[i].ChangeControlId;
                        row[ChangeControlHodApprovalConstants.ActionPlanProposalRequired.TrimAt()] = changeControlHodApprovals[i].ActionPlanProposalRequired;
                        row[ChangeControlHodApprovalConstants.ProposedActionPlans.TrimAt()] = changeControlHodApprovals[i].ProposedActionPlans;
                        row[ChangeControlHodApprovalConstants.HodReviewComments.TrimAt()] = changeControlHodApprovals[i].HodReviewComments;
                        row[ChangeControlHodApprovalConstants.Documents.TrimAt()] = changeControlHodApprovals[i].Documents;
                        row[ChangeControlHodApprovalConstants.Remarks.TrimAt()] = changeControlHodApprovals[i].Remarks;
                        row[ChangeControlHodApprovalConstants.CreatedBy.TrimAt()] = changeControlHodApprovals[i].CreatedBy;
                        row[ChangeControlHodApprovalConstants.CreatedDate.TrimAt()] = changeControlHodApprovals[i].CreatedDate;
                        row[ChangeControlHodApprovalConstants.ModifiedBy.TrimAt()] = changeControlHodApprovals[i].ModifiedBy;
                        row[ChangeControlHodApprovalConstants.ModifiedDate.TrimAt()] = changeControlHodApprovals[i].ModifiedDate;
                        dataTable.Rows.Add(row);
                    }
                }
                return dataTable;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        private static void SetDataTableColumns(DataTable dataTable)
        {
            dataTable.TableName = "UT_ChangeControlHodApproval_PSY";
            dataTable.Columns.Add(ChangeControlHodApprovalConstants.ChangeControlHodApprovalId.TrimAt());
            dataTable.Columns.Add(ChangeControlHodApprovalConstants.ChangeControlId.TrimAt());
            dataTable.Columns.Add(ChangeControlHodApprovalConstants.ActionPlanProposalRequired.TrimAt());
            dataTable.Columns.Add(ChangeControlHodApprovalConstants.ProposedActionPlans.TrimAt());
            dataTable.Columns.Add(ChangeControlHodApprovalConstants.HodReviewComments.TrimAt());
            dataTable.Columns.Add(ChangeControlHodApprovalConstants.Documents.TrimAt());
            dataTable.Columns.Add(ChangeControlHodApprovalConstants.Remarks.TrimAt());
            dataTable.Columns.Add(ChangeControlHodApprovalConstants.CreatedBy.TrimAt());
            dataTable.Columns.Add(ChangeControlHodApprovalConstants.CreatedDate.TrimAt());
            dataTable.Columns.Add(ChangeControlHodApprovalConstants.ModifiedBy.TrimAt());
            dataTable.Columns.Add(ChangeControlHodApprovalConstants.ModifiedDate.TrimAt());
        }
    }
}
