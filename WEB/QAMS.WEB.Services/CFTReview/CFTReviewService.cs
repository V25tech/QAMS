//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QAMS.Sheet1.Services
{
    using System;
    using System.Text;
    using System.IO;
    using System.Linq;
    using System.Data;
    using System.Collections.Generic;
    using QAMS.Common.Entities;
    using QAMS.Entities;
    using QAMS.Sheet1.Data;
    using QAMS.WEB.Services;


    // Comment
    public class CFTReviewService : ICFTReviewService
    {
        
        private readonly ICFTReviewData cFTReviewData;
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="cFTReviewData"></param>
        public CFTReviewService(ICFTReviewData cFTReviewData)
        {
            this.cFTReviewData = cFTReviewData;
        }
        
        public ResponseContext<CFTReview> GetAllCFTReview(RequestContext requestContext)
        {
            try
            {
                DataSet dataset = cFTReviewData.GetAllCFTReview(requestContext);
                List<CFTReview> result = CFTReviewConverter.SetAllCFTReview(dataset);
                return new ResponseContext<CFTReview>() { RowCount = CommonConverter.SetRowsCount(dataset), Response = result };
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public CFTReview GetCFTReviewByCFTId(System.Int32? cFTId)
        {
            try
            {
                DataSet dataset = cFTReviewData.GetCFTReviewByCFTId(cFTId);
                CFTReview result = CFTReviewConverter.SetCFTReview(dataset);
                return result;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }

        public CFTReview GetCFTReviewByInitId(System.Int32? initId)
        {
            try
            {
                DataSet dataset = cFTReviewData.GetCFTReviewByInitId(initId);
                CFTReview result = CFTReviewConverter.SetCFTReview(dataset);
                return result;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }

        public bool SaveCFTReview(CFTReview cFTReview)
        {
            try
            {
                String validationMessages = CFTReviewValidator.IsValidCFTReview(cFTReview);
                cFTReview.CreatedDate = DateTime.Now;
                cFTReview.UpdatedDate = DateTime.Now;
                if (validationMessages.Length <= 0)
                {
                    var result = cFTReviewData.SaveCFTReview(cFTReview);
                    return result;
                }
                throw new System.Exception(validationMessages);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool UpdateCFTReview(CFTReview cFTReview)
        {
            try
            {
                String validationMessages = CFTReviewValidator.IsValidCFTReview(cFTReview);
                if (validationMessages.Length <= 0)
                {
                    bool result = cFTReviewData.UpdateCFTReview(cFTReview);
                    return result;
                }
                throw new System.Exception(validationMessages);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteCFTReviewByCFTId(System.Int32? cFTId)
        {
            try
            {
                return cFTReviewData.DeleteCFTReviewByCFTId(cFTId);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteAllCFTReview(List<int> cFTIds)
        {
            try
            {
                return cFTReviewData.DeleteAllCFTReview(cFTIds);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
    }
}
