//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QAMS.WEB.Data
{
    using System;
    using System.Data;
    using System.Linq;
    using System.Data.SqlClient;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using QAMS.Common.Entities;
    using QAMS.WEB.Entities;
    using VAMLibrary.Core;
    using VAMLibrary.Core.Common;
    
    
    // Comment
    public class ActionPlan_MapData : IActionPlan_MapData
    {
        
        private readonly DataAccessHelper dataAccessHelper;
        
        public ActionPlan_MapData(DataAccessHelper dataAccessHelper)
        {
            this.dataAccessHelper = dataAccessHelper;
        }
        
        public DataSet GetAllActionPlan_Map(RequestContext requestContext)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = RequestContextConstants.PageNumber, Value = requestContext.PageNumber });
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = RequestContextConstants.PageSize, Value = requestContext.PageSize });
                DataSet dataset = (DataSet)dataAccessHelper.ExecuteStoredProcedure(ActionPlan_MapConstants.USP_ActionPlan_Map_PSY_GET_ALL, sqlparms, ExecutionType.Dataset);
                return dataset;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public DataSet GetActionPlan_MapByUserId(System.Int32? userId)
        {
            try
            {
                DataSet dataset = (DataSet)dataAccessHelper.ExecuteStoredProcedure(ActionPlan_MapConstants.USP_ActionPlan_Map_PSY_GET, ActionPlan_MapConstants.UserId, DbType.Int32, userId, ExecutionType.Dataset);
                return dataset;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool SaveActionPlan_Map(ActionPlan_Map actionPlan_Map)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = ActionPlan_MapConstants.CategoryId, Value = actionPlan_Map.CategoryId });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = ActionPlan_MapConstants.IsReviewed, Value = actionPlan_Map.IsReviewed });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = ActionPlan_MapConstants.IsActionPlan, Value = actionPlan_Map.IsActionPlan });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = ActionPlan_MapConstants.initId, Value = actionPlan_Map.initId });
                sqlparms.Add(new SqlParameter { DbType = DbType.Xml, ParameterName = ActionPlan_MapConstants.DocumentAction, Value = actionPlan_Map.DocumentAction });
                sqlparms.Add(new SqlParameter { DbType = DbType.Xml, ParameterName = ActionPlan_MapConstants.DocumentCategory, Value = actionPlan_Map.DocumentCategory });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = ActionPlan_MapConstants.CreatedBy, Value = actionPlan_Map.CreatedBy });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = ActionPlan_MapConstants.ModifiedBy, Value = actionPlan_Map.ModifiedBy });
                Object result = dataAccessHelper.ExecuteStoredProcedure(ActionPlan_MapConstants.USP_ActionPlan_Map_PSY_INSERT, sqlparms, ExecutionType.Scalar);
                return (Convert.ToInt32(result) > 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool UpdateActionPlan_Map(ActionPlan_Map actionPlan_Map)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = ActionPlan_MapConstants.UserId, Value = actionPlan_Map.UserId });
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = ActionPlan_MapConstants.CategoryId, Value = actionPlan_Map.CategoryId });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = ActionPlan_MapConstants.IsReviewed, Value = actionPlan_Map.IsReviewed });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = ActionPlan_MapConstants.IsActionPlan, Value = actionPlan_Map.IsActionPlan });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = ActionPlan_MapConstants.initId, Value = actionPlan_Map.initId });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = ActionPlan_MapConstants.DocumentAction, Value = actionPlan_Map.DocumentAction });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = ActionPlan_MapConstants.DocumentCategory, Value = actionPlan_Map.DocumentCategory });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = ActionPlan_MapConstants.ModifiedBy, Value = actionPlan_Map.ModifiedBy });
                Object result = dataAccessHelper.ExecuteStoredProcedure(ActionPlan_MapConstants.USP_ActionPlan_Map_PSY_UPDATE, sqlparms, ExecutionType.Scalar);
                return (Convert.ToInt32(result) > 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteActionPlan_MapByUserId(System.Int32? userId)
        {
            try
            {
                var result = dataAccessHelper.ExecuteStoredProcedure(ActionPlan_MapConstants.USP_ActionPlan_Map_PSY_DELETE, ActionPlan_MapConstants.UserId, DbType.Int32, userId, ExecutionType.NonQuery);
                return (Convert.ToInt32(result) >= 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteAllActionPlan_Map(List<int> userIds)
        {
            try
            {
                var result = dataAccessHelper.ExecuteStoredProcedure(ActionPlan_MapConstants.USP_ActionPlan_Map_PSY_DELETE_ALL, ActionPlan_MapConstants.UserId, DbType.String, string.Join(',',  userIds), ExecutionType.NonQuery);
                return (Convert.ToInt32(result) >= 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
    }
}
