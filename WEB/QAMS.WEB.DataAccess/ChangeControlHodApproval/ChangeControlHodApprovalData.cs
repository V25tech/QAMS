//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QAMS.WEB.Data
{
    using System;
    using System.Data;
    using System.Linq;
    using System.Data.SqlClient;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using QAMS.Common.Entities;
    using QAMS.WEB.Entities;
    using VAMLibrary.Core;
    using VAMLibrary.Core.Common;
    
    
    // Comment
    public class ChangeControlHodApprovalData : IChangeControlHodApprovalData
    {
        
        private readonly DataAccessHelper dataAccessHelper;
        
        public ChangeControlHodApprovalData(DataAccessHelper dataAccessHelper)
        {
            this.dataAccessHelper = dataAccessHelper;
        }
        
        public DataSet GetAllChangeControlHodApproval(RequestContext requestContext)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = RequestContextConstants.PageNumber, Value = requestContext.PageNumber });
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = RequestContextConstants.PageSize, Value = requestContext.PageSize });
                DataSet dataset = (DataSet)dataAccessHelper.ExecuteStoredProcedure(ChangeControlHodApprovalConstants.USP_ChangeControlHodApproval_PSY_GET_ALL, sqlparms, ExecutionType.Dataset);
                return dataset;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public DataSet GetChangeControlHodApprovalByChangeControlHodApprovalId(System.Int32? changeControlHodApprovalId)
        {
            try
            {
                DataSet dataset = (DataSet)dataAccessHelper.ExecuteStoredProcedure(ChangeControlHodApprovalConstants.USP_ChangeControlHodApproval_PSY_GET, ChangeControlHodApprovalConstants.ChangeControlHodApprovalId, DbType.Int32, changeControlHodApprovalId, ExecutionType.Dataset);
                return dataset;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool SaveChangeControlHodApproval(ChangeControlHodApproval changeControlHodApproval)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = ChangeControlHodApprovalConstants.ChangeControlId, Value = changeControlHodApproval.ChangeControlId });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = ChangeControlHodApprovalConstants.ActionPlanProposalRequired, Value = changeControlHodApproval.ActionPlanProposalRequired });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = ChangeControlHodApprovalConstants.ProposedActionPlans, Value = changeControlHodApproval.ProposedActionPlans });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = ChangeControlHodApprovalConstants.HodReviewComments, Value = changeControlHodApproval.HodReviewComments });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = ChangeControlHodApprovalConstants.Documents, Value = changeControlHodApproval.Documents });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = ChangeControlHodApprovalConstants.Remarks, Value = changeControlHodApproval.Remarks });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = ChangeControlHodApprovalConstants.CreatedBy, Value = changeControlHodApproval.CreatedBy });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = ChangeControlHodApprovalConstants.ModifiedBy, Value = changeControlHodApproval.ModifiedBy });
                Object result = dataAccessHelper.ExecuteStoredProcedure(ChangeControlHodApprovalConstants.USP_ChangeControlHodApproval_PSY_INSERT, sqlparms, ExecutionType.Scalar);
                return (Convert.ToInt32(result) > 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool UpdateChangeControlHodApproval(ChangeControlHodApproval changeControlHodApproval)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = ChangeControlHodApprovalConstants.ChangeControlHodApprovalId, Value = changeControlHodApproval.ChangeControlHodApprovalId });
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = ChangeControlHodApprovalConstants.ChangeControlId, Value = changeControlHodApproval.ChangeControlId });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = ChangeControlHodApprovalConstants.ActionPlanProposalRequired, Value = changeControlHodApproval.ActionPlanProposalRequired });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = ChangeControlHodApprovalConstants.ProposedActionPlans, Value = changeControlHodApproval.ProposedActionPlans });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = ChangeControlHodApprovalConstants.HodReviewComments, Value = changeControlHodApproval.HodReviewComments });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = ChangeControlHodApprovalConstants.Documents, Value = changeControlHodApproval.Documents });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = ChangeControlHodApprovalConstants.Remarks, Value = changeControlHodApproval.Remarks });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = ChangeControlHodApprovalConstants.ModifiedBy, Value = changeControlHodApproval.ModifiedBy });
                Object result = dataAccessHelper.ExecuteStoredProcedure(ChangeControlHodApprovalConstants.USP_ChangeControlHodApproval_PSY_UPDATE, sqlparms, ExecutionType.Scalar);
                return (Convert.ToInt32(result) > 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteChangeControlHodApprovalByChangeControlHodApprovalId(System.Int32? changeControlHodApprovalId)
        {
            try
            {
                var result = dataAccessHelper.ExecuteStoredProcedure(ChangeControlHodApprovalConstants.USP_ChangeControlHodApproval_PSY_DELETE, ChangeControlHodApprovalConstants.ChangeControlHodApprovalId, DbType.Int32, changeControlHodApprovalId, ExecutionType.NonQuery);
                return (Convert.ToInt32(result) >= 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteAllChangeControlHodApproval(List<int> changeControlHodApprovalIds)
        {
            try
            {
                var result = dataAccessHelper.ExecuteStoredProcedure(ChangeControlHodApprovalConstants.USP_ChangeControlHodApproval_PSY_DELETE_ALL, ChangeControlHodApprovalConstants.ChangeControlHodApprovalId, DbType.String, string.Join(',',  changeControlHodApprovalIds), ExecutionType.NonQuery);
                return (Convert.ToInt32(result) >= 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public DataSet GetChangeControlHodApprovalByChangeControlRegistrationId(System.Int32? changeControlId)
        {
            try
            {
                DataSet dataset = (DataSet)dataAccessHelper.ExecuteStoredProcedure(ChangeControlHodApprovalConstants.USP_ChangeControlHodApproval_PSY_By_ChangeControlId_GET, "@ChangeControlId", DbType.Int32, changeControlId, ExecutionType.Dataset);
                return dataset;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteChangeControlHodApprovalByChangeControlRegistrationId(System.Int32? changeControlId)
        {
            try
            {
                var result = dataAccessHelper.ExecuteStoredProcedure(ChangeControlHodApprovalConstants.USP_ChangeControlHodApproval_PSY_By_ChangeControlId_DELETE, "@ChangeControlId", DbType.Int32, changeControlId, ExecutionType.NonQuery);
                return (Convert.ToInt32(result) >= 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
    }
}
