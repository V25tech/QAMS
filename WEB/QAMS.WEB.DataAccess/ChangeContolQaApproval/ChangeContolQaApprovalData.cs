//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QAMS.WEB.Data
{
    using System;
    using System.Data;
    using System.Linq;
    using System.Data.SqlClient;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using QAMS.Common.Entities;
    using QAMS.WEB.Entities;
    using VAMLibrary.Core;
    using VAMLibrary.Core.Common;
    
    
    // Comment
    public class ChangeContolQaApprovalData : IChangeContolQaApprovalData
    {
        
        private readonly DataAccessHelper dataAccessHelper;
        
        public ChangeContolQaApprovalData(DataAccessHelper dataAccessHelper)
        {
            this.dataAccessHelper = dataAccessHelper;
        }
        
        public DataSet GetAllChangeContolQaApproval(RequestContext requestContext)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = RequestContextConstants.PageNumber, Value = requestContext.PageNumber });
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = RequestContextConstants.PageSize, Value = requestContext.PageSize });
                DataSet dataset = (DataSet)dataAccessHelper.ExecuteStoredProcedure(ChangeContolQaApprovalConstants.USP_ChangeContolQaApproval_PSY_GET_ALL, sqlparms, ExecutionType.Dataset);
                return dataset;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public DataSet GetChangeContolQaApprovalByChangeContolQaApprovalId(System.Int32? changeContolQaApprovalId)
        {
            try
            {
                DataSet dataset = (DataSet)dataAccessHelper.ExecuteStoredProcedure(ChangeContolQaApprovalConstants.USP_ChangeContolQaApproval_PSY_GET, ChangeContolQaApprovalConstants.ChangeContolQaApprovalId, DbType.Int32, changeContolQaApprovalId, ExecutionType.Dataset);
                return dataset;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool SaveChangeContolQaApproval(ChangeContolQaApproval changeContolQaApproval)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = ChangeContolQaApprovalConstants.ChangeControlId, Value = changeContolQaApproval.ChangeControlId });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = ChangeContolQaApprovalConstants.ClassificationOfChange, Value = changeContolQaApproval.ClassificationOfChange });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = ChangeContolQaApprovalConstants.ImpactOnProceduresOrDrawingsOrAssociatedFormats, Value = changeContolQaApproval.ImpactOnProceduresOrDrawingsOrAssociatedFormats });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = ChangeContolQaApprovalConstants.ProceduresOrDrawingsOrAssociatedFormatsImpactedAsResultOfChange, Value = changeContolQaApproval.ProceduresOrDrawingsOrAssociatedFormatsImpactedAsResultOfChange });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = ChangeContolQaApprovalConstants.AreThereAnyRegulatoryCustomerCommitmentsImpactedByThisChange, Value = changeContolQaApproval.AreThereAnyRegulatoryCustomerCommitmentsImpactedByThisChange });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = ChangeContolQaApprovalConstants.ImpactedRegulatoryCustomerCommitments, Value = changeContolQaApproval.ImpactedRegulatoryCustomerCommitments });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = ChangeContolQaApprovalConstants.AdditionalActionPlanProposalsRequired, Value = changeContolQaApproval.AdditionalActionPlanProposalsRequired });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = ChangeContolQaApprovalConstants.ProposedAdditionalActionPlans, Value = changeContolQaApproval.ProposedAdditionalActionPlans });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = ChangeContolQaApprovalConstants.RiskAssesmentRequired, Value = changeContolQaApproval.RiskAssesmentRequired });
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = ChangeContolQaApprovalConstants.ProposedRiskAssesment, Value = changeContolQaApproval.ProposedRiskAssesment });
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = ChangeContolQaApprovalConstants.CustomerApproval, Value = changeContolQaApproval.CustomerApproval });
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = ChangeContolQaApprovalConstants.DepartmentsRequiredToProvideImpactAssesmentEvaluation, Value = changeContolQaApproval.DepartmentsRequiredToProvideImpactAssesmentEvaluation });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = ChangeContolQaApprovalConstants.QAReviewComments, Value = changeContolQaApproval.QAReviewComments });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = ChangeContolQaApprovalConstants.Documents, Value = changeContolQaApproval.Documents });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = ChangeContolQaApprovalConstants.Remarks, Value = changeContolQaApproval.Remarks });

                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = ChangeContolQaApprovalConstants.CreatedBy, Value = changeContolQaApproval.CreatedBy });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = ChangeContolQaApprovalConstants.ModifiedBy, Value = changeContolQaApproval.ModifiedBy });
                Object result = dataAccessHelper.ExecuteStoredProcedure(ChangeContolQaApprovalConstants.USP_ChangeContolQaApproval_PSY_INSERT, sqlparms, ExecutionType.Scalar);
                return (Convert.ToInt32(result) > 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool UpdateChangeContolQaApproval(ChangeContolQaApproval changeContolQaApproval)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = ChangeContolQaApprovalConstants.ChangeContolQaApprovalId, Value = changeContolQaApproval.ChangeContolQaApprovalId });
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = ChangeContolQaApprovalConstants.ChangeControlId, Value = changeContolQaApproval.ChangeControlId });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = ChangeContolQaApprovalConstants.ClassificationOfChange, Value = changeContolQaApproval.ClassificationOfChange });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = ChangeContolQaApprovalConstants.ImpactOnProceduresOrDrawingsOrAssociatedFormats, Value = changeContolQaApproval.ImpactOnProceduresOrDrawingsOrAssociatedFormats });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = ChangeContolQaApprovalConstants.ProceduresOrDrawingsOrAssociatedFormatsImpactedAsResultOfChange, Value = changeContolQaApproval.ProceduresOrDrawingsOrAssociatedFormatsImpactedAsResultOfChange });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = ChangeContolQaApprovalConstants.AreThereAnyRegulatoryCustomerCommitmentsImpactedByThisChange, Value = changeContolQaApproval.AreThereAnyRegulatoryCustomerCommitmentsImpactedByThisChange });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = ChangeContolQaApprovalConstants.ImpactedRegulatoryCustomerCommitments, Value = changeContolQaApproval.ImpactedRegulatoryCustomerCommitments });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = ChangeContolQaApprovalConstants.AdditionalActionPlanProposalsRequired, Value = changeContolQaApproval.AdditionalActionPlanProposalsRequired });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = ChangeContolQaApprovalConstants.ProposedAdditionalActionPlans, Value = changeContolQaApproval.ProposedAdditionalActionPlans });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = ChangeContolQaApprovalConstants.RiskAssesmentRequired, Value = changeContolQaApproval.RiskAssesmentRequired });
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = ChangeContolQaApprovalConstants.ProposedRiskAssesment, Value = changeContolQaApproval.ProposedRiskAssesment });
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = ChangeContolQaApprovalConstants.CustomerApproval, Value = changeContolQaApproval.CustomerApproval });
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = ChangeContolQaApprovalConstants.DepartmentsRequiredToProvideImpactAssesmentEvaluation, Value = changeContolQaApproval.DepartmentsRequiredToProvideImpactAssesmentEvaluation });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = ChangeContolQaApprovalConstants.QAReviewComments, Value = changeContolQaApproval.QAReviewComments });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = ChangeContolQaApprovalConstants.Documents, Value = changeContolQaApproval.Documents });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = ChangeContolQaApprovalConstants.Remarks, Value = changeContolQaApproval.Remarks });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = ChangeContolQaApprovalConstants.ModifiedBy, Value = changeContolQaApproval.ModifiedBy });
                Object result = dataAccessHelper.ExecuteStoredProcedure(ChangeContolQaApprovalConstants.USP_ChangeContolQaApproval_PSY_UPDATE, sqlparms, ExecutionType.Scalar);
                return (Convert.ToInt32(result) > 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteChangeContolQaApprovalByChangeContolQaApprovalId(System.Int32? changeContolQaApprovalId)
        {
            try
            {
                var result = dataAccessHelper.ExecuteStoredProcedure(ChangeContolQaApprovalConstants.USP_ChangeContolQaApproval_PSY_DELETE, ChangeContolQaApprovalConstants.ChangeContolQaApprovalId, DbType.Int32, changeContolQaApprovalId, ExecutionType.NonQuery);
                return (Convert.ToInt32(result) >= 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteAllChangeContolQaApproval(List<int> changeContolQaApprovalIds)
        {
            try
            {
                var result = dataAccessHelper.ExecuteStoredProcedure(ChangeContolQaApprovalConstants.USP_ChangeContolQaApproval_PSY_DELETE_ALL, ChangeContolQaApprovalConstants.ChangeContolQaApprovalId, DbType.String, string.Join(',',  changeContolQaApprovalIds), ExecutionType.NonQuery);
                return (Convert.ToInt32(result) >= 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public DataSet GetChangeContolQaApprovalByChangeControlRegistrationId(System.Int32? changeControlId)
        {
            try
            {
                DataSet dataset = (DataSet)dataAccessHelper.ExecuteStoredProcedure(ChangeContolQaApprovalConstants.USP_ChangeContolQaApproval_PSY_By_ChangeControlId_GET, "@ChangeControlId", DbType.Int32, changeControlId, ExecutionType.Dataset);
                return dataset;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteChangeContolQaApprovalByChangeControlRegistrationId(System.Int32? changeControlId)
        {
            try
            {
                var result = dataAccessHelper.ExecuteStoredProcedure(ChangeContolQaApprovalConstants.USP_ChangeContolQaApproval_PSY_By_ChangeControlId_DELETE, "@ChangeControlId", DbType.Int32, changeControlId, ExecutionType.NonQuery);
                return (Convert.ToInt32(result) >= 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
    }
}
