//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QAMS.Sheet1.Data
{
    using System;
    using System.Data;
    using System.Linq;
    using System.Data.SqlClient;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using QAMS.Common.Entities;
    using QAMS.Entities;
    using VAMLibrary.Core;
    using VAMLibrary.Core.Common;
    
    
    // Comment
    public class ClosureData : IClosureData
    {
        
        private readonly DataAccessHelper dataAccessHelper;
        
        public ClosureData(DataAccessHelper dataAccessHelper)
        {
            this.dataAccessHelper = dataAccessHelper;
        }
        
        public DataSet GetAllClosure(RequestContext requestContext)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = RequestContextConstants.PageNumber, Value = requestContext.PageNumber });
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = RequestContextConstants.PageSize, Value = requestContext.PageSize });
                DataSet dataset = (DataSet)dataAccessHelper.ExecuteStoredProcedure(ClosureConstants.USP_Closure_PSY_GET_ALL, sqlparms, ExecutionType.Dataset);
                return dataset;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public DataSet GetClosureByCId(System.Int32? cId)
        {
            try
            {
                DataSet dataset = (DataSet)dataAccessHelper.ExecuteStoredProcedure(ClosureConstants.USP_Closure_PSY_GET, ClosureConstants.CId, DbType.Int32, cId, ExecutionType.Dataset);
                return dataset;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool SaveClosure(Closure closure)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = ClosureConstants.InitiativeId, Value = closure.InitiativeId });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = ClosureConstants.InitiativeName, Value = closure.InitiativeName });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = ClosureConstants.IsSave, Value = closure.IsSave });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = ClosureConstants.ImplementEffChanges, Value = closure.ImplementEffChanges });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = ClosureConstants.Status, Value = closure.Status });
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = ClosureConstants.CreatedBy, Value = closure.CreatedBy });
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = ClosureConstants.UpdatedBy, Value = closure.UpdatedBy });
                sqlparms.Add(new SqlParameter { DbType = DbType.DateTime, ParameterName = ClosureConstants.UpdatedDate, Value = closure.UpdatedDate });
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = ClosureConstants.Plant, Value = closure.Plant });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = ClosureConstants.Decision, Value = closure.Decision });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = ClosureConstants.Remarks, Value = closure.Remarks });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = ClosureConstants.ActionPlanReviewComments, Value = closure.ActionPlanReviewComments });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = ClosureConstants.IsAllDocumentsApprovedEff, Value = closure.IsAllDocumentsApprovedEff });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = ClosureConstants.TrainingCompleted, Value = closure.TrainingCompleted });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = ClosureConstants.IsApprovedChangesEff, Value = closure.IsApprovedChangesEff });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = ClosureConstants.IsIdentifiedActions, Value = closure.IsIdentifiedActions });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = ClosureConstants.CDocument, Value = closure.CDocument });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = ClosureConstants.ModifiedBy, Value = closure.ModifiedBy });
                Object result = dataAccessHelper.ExecuteStoredProcedure(ClosureConstants.USP_Closure_PSY_INSERT, sqlparms, ExecutionType.Scalar);
                return (Convert.ToInt32(result) > 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool UpdateClosure(Closure closure)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = ClosureConstants.CId, Value = closure.CId });
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = ClosureConstants.InitiativeId, Value = closure.InitiativeId });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = ClosureConstants.InitiativeName, Value = closure.InitiativeName });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = ClosureConstants.IsSave, Value = closure.IsSave });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = ClosureConstants.ImplementEffChanges, Value = closure.ImplementEffChanges });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = ClosureConstants.Status, Value = closure.Status });
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = ClosureConstants.UpdatedBy, Value = closure.UpdatedBy });
                sqlparms.Add(new SqlParameter { DbType = DbType.DateTime, ParameterName = ClosureConstants.UpdatedDate, Value = closure.UpdatedDate });
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = ClosureConstants.Plant, Value = closure.Plant });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = ClosureConstants.Decision, Value = closure.Decision });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = ClosureConstants.Remarks, Value = closure.Remarks });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = ClosureConstants.ActionPlanReviewComments, Value = closure.ActionPlanReviewComments });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = ClosureConstants.IsAllDocumentsApprovedEff, Value = closure.IsAllDocumentsApprovedEff });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = ClosureConstants.TrainingCompleted, Value = closure.TrainingCompleted });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = ClosureConstants.IsApprovedChangesEff, Value = closure.IsApprovedChangesEff });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = ClosureConstants.IsIdentifiedActions, Value = closure.IsIdentifiedActions });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = ClosureConstants.CDocument, Value = closure.CDocument });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = ClosureConstants.ModifiedBy, Value = closure.ModifiedBy });
                Object result = dataAccessHelper.ExecuteStoredProcedure(ClosureConstants.USP_Closure_PSY_UPDATE, sqlparms, ExecutionType.Scalar);
                return (Convert.ToInt32(result) > 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteClosureByCId(System.Int32? cId)
        {
            try
            {
                var result = dataAccessHelper.ExecuteStoredProcedure(ClosureConstants.USP_Closure_PSY_DELETE, ClosureConstants.CId, DbType.Int32, cId, ExecutionType.NonQuery);
                return (Convert.ToInt32(result) >= 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteAllClosure(List<int> cIds)
        {
            try
            {
                var result = dataAccessHelper.ExecuteStoredProcedure(ClosureConstants.USP_Closure_PSY_DELETE_ALL, ClosureConstants.CId, DbType.String, string.Join(',',  cIds), ExecutionType.NonQuery);
                return (Convert.ToInt32(result) >= 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
    }
}
