//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QAMS.Sheet1.Data
{
    using System;
    using System.Data;
    using System.Linq;
    using System.Data.SqlClient;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using QAMS.Common.Entities;
    using QAMS.Entities;
    using VAMLibrary.Core;
    using VAMLibrary.Core.Common;
    
    
    // Comment
    public class CFTReviewData : ICFTReviewData
    {
        
        private readonly DataAccessHelper dataAccessHelper;
        
        public CFTReviewData(DataAccessHelper dataAccessHelper)
        {
            this.dataAccessHelper = dataAccessHelper;
        }
        
        public DataSet GetAllCFTReview(RequestContext requestContext)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = RequestContextConstants.PageNumber, Value = requestContext.PageNumber });
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = RequestContextConstants.PageSize, Value = requestContext.PageSize });
                DataSet dataset = (DataSet)dataAccessHelper.ExecuteStoredProcedure(CFTReviewConstants.USP_CFTReview_PSY_GET_ALL, sqlparms, ExecutionType.Dataset);
                return dataset;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public DataSet GetCFTReviewByCFTId(System.Int32? cFTId)
        {
            try
            {
                DataSet dataset = (DataSet)dataAccessHelper.ExecuteStoredProcedure(CFTReviewConstants.USP_CFTReview_PSY_GET, CFTReviewConstants.CFTId, DbType.Int32, cFTId, ExecutionType.Dataset);
                return dataset;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }

        public DataSet GetCFTReviewByInitId(System.Int32? initId)
        {
            try
            {
                DataSet dataset = (DataSet)dataAccessHelper.ExecuteStoredProcedure("dbo.USP_CFTReview_PSY_GET_BY_INIT", "@Init_PSY", DbType.Int32, initId, ExecutionType.Dataset);
                return dataset;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }

        public bool SaveCFTReview(CFTReview cFTReview)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = CFTReviewConstants.InitiativeId, Value = cFTReview.InitiativeId });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = CFTReviewConstants.InitiativeName, Value = cFTReview.InitiativeName });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = CFTReviewConstants.IsSave, Value = cFTReview.IsSave });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = CFTReviewConstants.Remarks, Value = cFTReview.Remarks });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = CFTReviewConstants.Status, Value = cFTReview.Status });
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = CFTReviewConstants.CreatedBy, Value = cFTReview.CreatedBy });
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = CFTReviewConstants.UpdatedBy, Value = cFTReview.UpdatedBy });
                sqlparms.Add(new SqlParameter { DbType = DbType.DateTime, ParameterName = CFTReviewConstants.UpdatedDate, Value = cFTReview.UpdatedDate });
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = CFTReviewConstants.Plant, Value = cFTReview.Plant });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = CFTReviewConstants.IsProposedChange, Value = cFTReview.IsProposedChange });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = CFTReviewConstants.CFTDocument, Value = cFTReview.CFTDocument });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = CFTReviewConstants.ModifiedBy, Value = cFTReview.ModifiedBy });
                Object result = dataAccessHelper.ExecuteStoredProcedure(CFTReviewConstants.USP_CFTReview_PSY_INSERT, sqlparms, ExecutionType.Scalar);
                return (Convert.ToInt32(result) > 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool UpdateCFTReview(CFTReview cFTReview)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = CFTReviewConstants.CFTId, Value = cFTReview.CFTId });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = CFTReviewConstants.IsSave, Value = cFTReview.IsSave });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = CFTReviewConstants.Remarks, Value = cFTReview.Remarks });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = CFTReviewConstants.Status, Value = cFTReview.Status });
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = CFTReviewConstants.UpdatedBy, Value = cFTReview.UpdatedBy });
                sqlparms.Add(new SqlParameter { DbType = DbType.DateTime, ParameterName = CFTReviewConstants.UpdatedDate, Value = cFTReview.UpdatedDate });
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = CFTReviewConstants.Plant, Value = cFTReview.Plant });
                sqlparms.Add(new SqlParameter { DbType = DbType.Boolean, ParameterName = CFTReviewConstants.IsProposedChange, Value = cFTReview.IsProposedChange });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = CFTReviewConstants.CFTDocument, Value = cFTReview.CFTDocument });
                Object result = dataAccessHelper.ExecuteStoredProcedure(CFTReviewConstants.USP_CFTReview_PSY_UPDATE, sqlparms, ExecutionType.Scalar);
                return (Convert.ToInt32(result) > 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteCFTReviewByCFTId(System.Int32? cFTId)
        {
            try
            {
                var result = dataAccessHelper.ExecuteStoredProcedure(CFTReviewConstants.USP_CFTReview_PSY_DELETE, CFTReviewConstants.CFTId, DbType.Int32, cFTId, ExecutionType.NonQuery);
                return (Convert.ToInt32(result) >= 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteAllCFTReview(List<int> cFTIds)
        {
            try
            {
                var result = dataAccessHelper.ExecuteStoredProcedure(CFTReviewConstants.USP_CFTReview_PSY_DELETE_ALL, CFTReviewConstants.CFTId, DbType.String, string.Join(',',  cFTIds), ExecutionType.NonQuery);
                return (Convert.ToInt32(result) >= 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
    }
}
